
const Order = require('../models/Order');
const CartItem = require('../models/CartItem');
const { sortObject } = require('../../utils/sortObject'); 
const request = require('request');
const moment = require('moment');
const crypto = require("crypto");
const querystring = require('qs');
const { sendConfirmPayentEmail } = require('../../services/emailService');
const { voucherHistory } = require('../../services/voucherHistory');
require('dotenv').config();
const PUBLIC_URL = 'https://b597dbe3ce5d.ngrok-free.app';
const tmnCode = process.env.VNP_TMNCODE;
const secretKey = process.env.VNP_HASHSECRET;
const vnpUrl = process.env.VNP_URL;
const returnUrl = `${PUBLIC_URL}/order/vnpay_return`;
let apiUrl = `${PUBLIC_URL}/order/vnpay_ipn`;

class vnpayController {
    // [GET] /order/create_payment_url
    createPaymentUrl(req, res, next) {
        res.render('vnpayView/order', {
            amount: req.query.totalPrice,
            orderId: req.query.orderId,
        })
    };

    // [POST] /order/create_payment_url
    paymentUrl(req, res, next) {
    
    let date = new Date();
    let createDate = moment(date).format('YYYYMMDDHHmmss');
    let expireDate = moment(date).add(15, "minutes").format("YYYYMMDDHHmmss");
    
    let ipAddr = req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress ||
        req.connection.socket.remoteAddress;
    
    let orderId = req.body.orderId;
    let amount = req.body.amount;
    let bankCode = req.body.bankCode;
    let locale = req.body.language;
    let currCode = 'VND';
    let vnp_Params = {
        vnp_Version: "2.1.0",
        vnp_Command: "pay",
        vnp_TmnCode: tmnCode,
        vnp_Locale: locale,
        vnp_CurrCode: currCode,
        vnp_TxnRef: orderId,
        vnp_OrderInfo: `Payment for ${orderId}`,
        vnp_OrderType: "other",
        vnp_Amount: amount * 100,
        vnp_ReturnUrl: returnUrl,
        vnp_IpAddr: ipAddr,
        vnp_CreateDate: createDate,
        vnp_ExpireDate: expireDate,
        vnp_BankCode: bankCode,
    };

   const sortedParams = sortObject(vnp_Params);

    const urlParams = new URLSearchParams();
    for (let [key, value] of Object.entries(sortedParams)) {
        urlParams.append(key, value);
    }

    const querystring = urlParams.toString();

    const hmac = crypto.createHmac("sha512", secretKey);
    const signed = hmac.update(querystring).digest("hex");

    urlParams.append("vnp_SecureHash", signed);

    const paymentUrl = `${vnpUrl}?${urlParams.toString()}`;

    res.json({
        success: true,
        paymentUrl: paymentUrl,
    });
    }

    // [GET] /order/vnpay_return
    async vnpayReturn(req, res, next) {
        let vnp_Params = req.query;

        let secureHash = vnp_Params['vnp_SecureHash'];
        const orderId = vnp_Params['vnp_TxnRef'];
        const amount = vnp_Params['vnp_Amount'];
        const resultCode = vnp_Params['vnp_ResponseCode'];

        delete vnp_Params['vnp_SecureHash'];
        delete vnp_Params['vnp_SecureHashType'];

       const sortedParams = sortObject(vnp_Params);

        console.log('=====VNP_PARAMS=====');
        console.log(sortedParams);

        const urlParams = new URLSearchParams();
        for (let [key, value] of Object.entries(sortedParams)) {
            urlParams.append(key, value);
        }

        const querystring = urlParams.toString();

        console.log(querystring);

        const hmac = crypto.createHmac("sha512", secretKey);
        const signed = hmac.update(querystring).digest("hex");

        urlParams.append("vnp_SecureHash", signed);

        const paymentUrl = `${vnpUrl}?${urlParams.toString()}`;

        console.log(paymentUrl);

        try {
            // Ki·ªÉm tra checksum
            if (secureHash !== signed) {
                return res.status(400).json({
                    success: false,
                    message: 'CHECKSUM ERROR',
                });
            }

            // T√¨m ƒë∆°n h√†ng trong DB
            const order = await Order.findById(orderId).populate({ path: 'user', select: 'name email phone'}).lean();
            if (!order) {
                return res.status(400).json({
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng',
                });
            };

            // Ki·∫øm tra s·ªë ti·ªÅn xem c√≥ kh·ªõp kh√¥ng
            if (Number(amount) / 100 !== order.totalAmount) {
                return res.status(400).json({
                    success: false,
                    message: 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá',
                });
            };

            // Ki·ªÉm tra tr·∫°ng th√°i
            if (Number(resultCode) === 0) {
                await Order.findByIdAndUpdate(order._id, {
                    isActive: true,
                    isPaid: true,
                    status: 'pending',
                    paidAt: new Date(),
                    paymentMethod: 'banking',
                    bankingMethod: 'vnpay',
                    transactionDate: sortedParams['vnp_PayDate'],
                    transactionNo: sortedParams['vnp_TransactionNo'],
                });

                // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng
                await CartItem.deleteMany({ user: order.user });

                // Ghi l·∫°i l·∫ßn s·ª≠ d·ª•ng voucher
                await voucherHistory(order);

                // G·ª≠i mail thanh to√°n th√†nh c√¥ng
                sendConfirmPayentEmail(order.user.email, orderId, 'google.com', order.user.name, order.totalAmount);

                return res.status(400).render('transaction-status/transaction-success', {
                    order,
                    message: 'Thanh to√°n th√†nh c√¥ng',
                });
            } else {
                await Order.findByIdAndUpdate(order._id, {
                                        isActive: false,
                                        isPaid: false,
                                        status: 'failed',
                                        failReason: 'payment failed',
                                    });
                
                // Xo√° nh·ªØng thanh to√°n th·∫•t b·∫°i sau 3 ng√†y 
                const createdAt = new Date(createdAt);
                const now = Date.now();
                
                const expiryMs = 3 * 24 * 60 * 60 * 1000;
                    if (now - createdAt >= expiryMs) {
                        await Order.deleteOne({ _id: order._id });
                    };
                 return res.status(400).render('transaction-status/transaction-error', {
                    order,
                    message: 'Thanh to√°n th·∫•t b·∫°i!',
                });
            }
        } catch (err) {
            console.error(err);
            return res.status(500).json({
                success: false,
                message: 'L·ªói khi thanh to√°n b·∫±ng VNPAY',
            });
        };
    }

    // [GET] /order/vnpay_ipn
    vnpayIpn(req, res, next) {
        console.log('üì• VNPAY IPN CALLED!');
        console.log('‚úÖ Query params:', req.query);
        let vnp_Params = req.query;

        let secureHash = vnp_Params['vnp_SecureHash'];
        
        let orderId = vnp_Params['vnp_TxnRef'];
        let rspCode = vnp_Params['vnp_ResponseCode'];

        delete vnp_Params['vnp_SecureHash'];
        delete vnp_Params['vnp_SecureHashType'];

        vnp_Params = sortObject(vnp_Params);

        let querystring = require('qs');
        let signData = querystring.stringify(vnp_Params, { encode: false });
        let crypto = require("crypto");     
        let hmac = crypto.createHmac("sha512", secretKey);
        let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");    

        console.log('üßæ signData:', signData);
        console.log('üéØ Params:', vnp_Params);
        console.log('üîë Signed checksum: ', signed);
        console.log('üîê From VNPAY:      ', secureHash);
        
        let paymentStatus = '0'; // Gi·∫£ s·ª≠ '0' l√† tr·∫°ng th√°i kh·ªüi t·∫°o giao d·ªãch, ch∆∞a c√≥ IPN. Tr·∫°ng th√°i n√†y ƒë∆∞·ª£c l∆∞u khi y√™u c·∫ßu thanh to√°n chuy·ªÉn h∆∞·ªõng sang C·ªïng thanh to√°n VNPAY t·∫°i ƒë·∫ßu kh·ªüi t·∫°o ƒë∆°n h√†ng.
        //let paymentStatus = '1'; // Gi·∫£ s·ª≠ '1' l√† tr·∫°ng th√°i th√†nh c√¥ng b·∫°n c·∫≠p nh·∫≠t sau IPN ƒë∆∞·ª£c g·ªçi v√† tr·∫£ k·∫øt qu·∫£ v·ªÅ n√≥
        //let paymentStatus = '2'; // Gi·∫£ s·ª≠ '2' l√† tr·∫°ng th√°i th·∫•t b·∫°i b·∫°n c·∫≠p nh·∫≠t sau IPN ƒë∆∞·ª£c g·ªçi v√† tr·∫£ k·∫øt qu·∫£ v·ªÅ n√≥
        
        let checkOrderId = true; // M√£ ƒë∆°n h√†ng "gi√° tr·ªã c·ªßa vnp_TxnRef" VNPAY ph·∫£n h·ªìi t·ªìn t·∫°i trong CSDL c·ªßa b·∫°n
        let checkAmount = true; // Ki·ªÉm tra s·ªë ti·ªÅn "gi√° tr·ªã c·ªßa vnp_Amout/100" tr√πng kh·ªõp v·ªõi s·ªë ti·ªÅn c·ªßa ƒë∆°n h√†ng trong CSDL c·ªßa b·∫°n
        if(secureHash === signed){ //ki·ªÉm tra checksum
            if(checkOrderId){
                if(checkAmount){
                    if(paymentStatus=="0"){ //ki·ªÉm tra t√¨nh tr·∫°ng giao d·ªãch tr∆∞·ªõc khi c·∫≠p nh·∫≠t t√¨nh tr·∫°ng thanh to√°n
                        if(rspCode=="00"){
                            //thanh cong
                            //paymentStatus = '1'
                            // ·ªû ƒë√¢y c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch thanh to√°n th√†nh c√¥ng v√†o CSDL c·ªßa b·∫°n
                            res.status(200).json({RspCode: '00', Message: 'Success'})
                        }
                        else {
                            //that bai
                            //paymentStatus = '2'
                            // ·ªû ƒë√¢y c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch thanh to√°n th·∫•t b·∫°i v√†o CSDL c·ªßa b·∫°n
                            res.status(200).json({RspCode: '00', Message: 'Success'})
                        }
                    }
                    else{
                        res.status(200).json({RspCode: '02', Message: 'This order has been updated to the payment status'})
                    }
                }
                else{
                    res.status(200).json({RspCode: '04', Message: 'Amount invalid'})
                }
            }       
            else {
                res.status(200).json({RspCode: '01', Message: 'Order not found'})
            }
        }
        else {
            res.status(200).json({RspCode: '97', Message: 'Checksum failed'})
        }
    }
}

module.exports = new vnpayController();