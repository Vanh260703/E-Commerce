<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒêƒÉng K√Ω - Fresh Fruits Store</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #ff9a56 0%, #ff6b35 50%, #f7931e 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            position: relative;
            overflow-x: hidden;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: 
                radial-gradient(circle at 20% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%);
            pointer-events: none;
        }

        .fruit-decoration {
            position: absolute;
            font-size: 60px;
            opacity: 0.1;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
        }

        .fruit-decoration:nth-child(1) { top: 10%; left: 10%; animation-delay: 0s; }
        .fruit-decoration:nth-child(2) { top: 20%; right: 15%; animation-delay: -2s; }
        .fruit-decoration:nth-child(3) { bottom: 15%; left: 5%; animation-delay: -4s; }
        .fruit-decoration:nth-child(4) { bottom: 10%; right: 10%; animation-delay: -1s; }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(5deg); }
        }

        .register-container {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(15px);
            border-radius: 25px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            overflow: hidden;
            width: 100%;
            max-width: 520px;
            animation: slideUp 0.8s ease-out;
            position: relative;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .register-header {
            background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 50%, #CDDC39 100%);
            color: white;
            padding: 35px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .register-header::before {
            content: 'üçéüçäüçåüçáü•ùüçì';
            position: absolute;
            top: -10px;
            left: -20px;
            right: -20px;
            font-size: 30px;
            opacity: 0.2;
            letter-spacing: 30px;
            animation: slideRight 15s linear infinite;
        }

        @keyframes slideRight {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .register-header h1 {
            font-size: 32px;
            margin-bottom: 12px;
            font-weight: 700;
            position: relative;
            z-index: 2;
        }

        .register-header p {
            opacity: 0.95;
            font-size: 17px;
            position: relative;
            z-index: 2;
        }

        .register-form {
            padding: 45px;
        }

        .form-row {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .form-group {
            flex: 1;
            margin-bottom: 22px;
        }

        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: #2E7D32;
            font-size: 15px;
        }

        .required {
            color: #FF5722;
        }

        .input-wrapper {
            position: relative;
        }

        .form-control {
            width: 100%;
            padding: 16px 22px;
            padding-left: 55px;
            border: 2px solid #E8F5E8;
            border-radius: 15px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: #FAFAFA;
        }

        .form-control:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 0 4px rgba(76, 175, 80, 0.1);
            transform: translateY(-3px);
            background: #fff;
        }

        .input-icon {
            position: absolute;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            color: #81C784;
            font-size: 18px;
            transition: all 0.3s ease;
        }

        .form-control:focus + .input-icon {
            color: #4CAF50;
            transform: translateY(-50%) scale(1.1);
        }

        select.form-control {
            cursor: pointer;
        }

        .password-toggle {
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #81C784;
            font-size: 18px;
            transition: all 0.3s ease;
        }

        .password-toggle:hover {
            color: #4CAF50;
            transform: translateY(-50%) scale(1.1);
        }

        .btn-register {
            width: 100%;
            padding: 18px;
            background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 50%, #CDDC39 100%);
            color: white;
            border: none;
            border-radius: 15px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 15px;
            position: relative;
            overflow: hidden;
        }

        .btn-register::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.3), transparent);
            transform: rotate(45deg);
            transition: all 0.5s;
            opacity: 0;
        }

        .btn-register:hover::before {
            animation: shine 0.5s ease-in-out;
        }

        @keyframes shine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); opacity: 0; }
            50% { opacity: 1; }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); opacity: 0; }
        }

        .btn-register:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(76, 175, 80, 0.4);
        }

        .btn-register:active {
            transform: translateY(-1px);
        }

        .login-link {
            text-align: center;
            margin-top: 30px;
            padding-top: 30px;
            border-top: 2px solid #E8F5E8;
        }

        .login-link a {
            color: #4CAF50;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
        }

        .login-link a::after {
            content: '';
            position: absolute;
            width: 0;
            height: 2px;
            bottom: -3px;
            left: 50%;
            background: #4CAF50;
            transition: all 0.3s ease;
        }

        .login-link a:hover::after {
            width: 100%;
            left: 0;
        }

        .login-link a:hover {
            color: #2E7D32;
        }

        .error-message {
            color: #FF5722;
            font-size: 13px;
            margin-top: 8px;
            display: none;
            font-weight: 500;
        }

        .form-control.error {
            border-color: #FF5722;
            box-shadow: 0 0 0 4px rgba(255, 87, 34, 0.1);
            background: #FFEBEE;
        }

        .success-message {
            background: linear-gradient(135deg, #C8E6C9, #DCEDC8);
            color: #2E7D32;
            padding: 16px;
            border-radius: 12px;
            margin-bottom: 25px;
            border: 2px solid #A5D6A7;
            display: none;
            font-weight: 600;
        }

        .loading {
            display: none;
            margin-left: 12px;
        }

        @media (max-width: 600px) {
            .register-container {
                margin: 15px;
                border-radius: 20px;
            }

            .register-form {
                padding: 35px 25px;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .register-header {
                padding: 30px 25px;
            }

            .register-header h1 {
                font-size: 28px;
            }

            .fruit-decoration {
                font-size: 40px;
            }
        }

        .store-branding {
            position: absolute;
            top: -15px;
            right: -15px;
            background: linear-gradient(135deg, #FF9800, #FF5722);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 700;
            box-shadow: 0 5px 15px rgba(255, 152, 0, 0.3);
        }

        .input-helper {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
            font-style: italic;
        }
    </style>
</head>
<body>
    <!-- Fruit decorations -->
    <div class="fruit-decoration">üçé</div>
    <div class="fruit-decoration">üçä</div>
    <div class="fruit-decoration">üçå</div>
    <div class="fruit-decoration">üçá</div>

    <div class="register-container">
        <div class="store-branding">üçì Fresh Store</div>
        
        <div class="register-header">
            <h1><i class="fas fa-seedling"></i> Tham Gia Fresh Fruits</h1>
            <p>ƒêƒÉng k√Ω ƒë·ªÉ th∆∞·ªüng th·ª©c tr√°i c√¢y t∆∞∆°i ngon nh·∫•t!</p>
        </div>

        <form class="register-form" id="registerForm" action="/auth/register" method="POST">
            <div class="success-message" id="successMessage">
                <i class="fas fa-check-circle"></i> Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Fresh Fruits! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n.
            </div>

            <!-- Th√¥ng tin c√° nh√¢n -->
            <div class="form-row">
                <div class="form-group">
                    <label for="name">H·ªç v√† t√™n <span class="required">*</span></label>
                    <div class="input-wrapper">
                        <input type="text" id="name" name="name" class="form-control" required placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n">
                        <i class="fas fa-user input-icon"></i>
                    </div>
                    <div class="error-message" id="nameError"></div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="username">T√™n ƒëƒÉng nh·∫≠p <span class="required">*</span></label>
                    <div class="input-wrapper">
                        <input type="text" id="username" name="username" class="form-control" required placeholder="Ch·ªçn t√™n ƒëƒÉng nh·∫≠p">
                        <i class="fas fa-at input-icon"></i>
                    </div>
                    <div class="input-helper">3-20 k√Ω t·ª±, ch·ªâ ch·ª©a ch·ªØ, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi</div>
                    <div class="error-message" id="usernameError"></div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="email">Email <span class="required">*</span></label>
                    <div class="input-wrapper">
                        <input type="email" id="email" name="email" class="form-control" required placeholder="email@example.com">
                        <i class="fas fa-envelope input-icon"></i>
                    </div>
                    <div class="input-helper">Ch√∫ng t√¥i s·∫Ω g·ª≠i th√¥ng tin khuy·∫øn m√£i tr√°i c√¢y t·ªõi email n√†y</div>
                    <div class="error-message" id="emailError"></div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="phone">S·ªë ƒëi·ªán tho·∫°i <span class="required">*</span></label>
                    <div class="input-wrapper">
                        <input type="tel" id="phone" name="phone" class="form-control" required placeholder="0xxxxxxxxx">
                        <i class="fas fa-phone input-icon"></i>
                    </div>
                    <div class="input-helper">ƒê·ªÉ li√™n h·ªá giao h√†ng tr√°i c√¢y t∆∞∆°i</div>
                    <div class="error-message" id="phoneError"></div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="password">M·∫≠t kh·∫©u <span class="required">*</span></label>
                    <div class="input-wrapper">
                        <input type="password" id="password" name="password" class="form-control" required placeholder="T·∫°o m·∫≠t kh·∫©u m·∫°nh">
                        <i class="fas fa-lock input-icon"></i>
                        <i class="fas fa-eye password-toggle" id="togglePassword"></i>
                    </div>
                    <div class="error-message" id="passwordError"></div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u <span class="required">*</span></label>
                    <div class="input-wrapper">
                        <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u">
                        <i class="fas fa-lock input-icon"></i>
                        <i class="fas fa-eye password-toggle" id="toggleConfirmPassword"></i>
                    </div>
                    <div class="error-message" id="confirmPasswordError"></div>
                </div>
            </div>

            <!-- Th√¥ng tin b·ªï sung -->
            <div class="form-row">
                <div class="form-group">
                    <label for="dateOfBirth">Ng√†y sinh</label>
                    <div class="input-wrapper">
                        <input type="date" id="dateOfBirth" name="dateOfBirth" class="form-control">
                        <i class="fas fa-birthday-cake input-icon"></i>
                    </div>
                    <div class="input-helper">ƒê·ªÉ g·ª≠i qu√† sinh nh·∫≠t ƒë·∫∑c bi·ªát</div>
                    <div class="error-message" id="dateOfBirthError"></div>
                </div>
                <div class="form-group">
                    <label for="gender">Gi·ªõi t√≠nh</label>
                    <div class="input-wrapper">
                        <select id="gender" name="gender" class="form-control">
                            <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                            <option value="male">Nam</option>
                            <option value="female">N·ªØ</option>
                            <option value="other">Kh√°c</option>
                        </select>
                        <i class="fas fa-venus-mars input-icon"></i>
                    </div>
                    <div class="error-message" id="genderError"></div>
                </div>
            </div>

            <button type="submit" class="btn-register">
                <i class="fas fa-seedling"></i> Tham Gia Fresh Fruits
                <i class="fas fa-spinner fa-spin loading" id="loadingSpinner"></i>
            </button>

            <div class="login-link">
                <p>ƒê√£ c√≥ t√†i kho·∫£n? <a href="/auth/login">üçé ƒêƒÉng nh·∫≠p ngay</a></p>
            </div>
        </form>
    </div>

    <script>
        // Password toggle functionality
        document.getElementById('togglePassword').addEventListener('click', function() {
            const password = document.getElementById('password');
            const icon = this;
            
            if (password.type === 'password') {
                password.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                password.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });

        document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
            const confirmPassword = document.getElementById('confirmPassword');
            const icon = this;
            
            if (confirmPassword.type === 'password') {
                confirmPassword.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                confirmPassword.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });

        // Form validation
        function validateForm() {
            let isValid = true;
            
            // Reset previous errors
            document.querySelectorAll('.error-message').forEach(error => {
                error.style.display = 'none';
            });
            document.querySelectorAll('.form-control').forEach(input => {
                input.classList.remove('error');
            });

            // Validate required fields
            const requiredFields = ['name', 'username', 'email', 'phone', 'password', 'confirmPassword', 'gender', 'dateOfBirth'];
            
            requiredFields.forEach(field => {
                const input = document.getElementById(field);
                if (!input.value.trim()) {
                    showError(field, 'Vui l√≤ng ƒëi·ªÅn th√¥ng tin n√†y');
                    isValid = false;
                }
            });

            // Validate email format
            const email = document.getElementById('email').value;
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (email && !emailRegex.test(email)) {
                showError('email', 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
                isValid = false;
            }

            // Validate phone format (Vietnamese phone number)
            const phone = document.getElementById('phone').value;
            const phoneRegex = /^(0[3|5|7|8|9])+([0-9]{8})$/;
            if (phone && !phoneRegex.test(phone)) {
                showError('phone', 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (VD: 0987654321)');
                isValid = false;
            }

            // Validate username (alphanumeric and underscore, 3-20 characters)
            const username = document.getElementById('username').value;
            const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
            if (username && !usernameRegex.test(username)) {
                showError('username', 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ 3-20 k√Ω t·ª±, ch·ªâ ch·ª©a ch·ªØ, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi');
                isValid = false;
            }

            // Validate password strength
            const password = document.getElementById('password').value;
            if (password && password.length < 6) {
                showError('password', 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
                isValid = false;
            }

            // Validate password confirmation
            const confirmPassword = document.getElementById('confirmPassword').value;
            if (password !== confirmPassword) {
                showError('confirmPassword', 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng tr√πng kh·ªõp');
                isValid = false;
            }

            // Validate gender
            const gender = document.getElementById('gender').value;
            if (!gender) {
                showError('gender', 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh');
                isValid = false;
            }

            // Validate dateOfBirth
            const dateOfBirth = document.getElementById('dateOfBirth').value;
            if (!dateOfBirth) {
                showError('dateOfBirth', 'Vui l√≤ng ch·ªçn ng√†y sinh');
                isValid = false;
            } else {
                // Ki·ªÉm tra tu·ªïi (v√≠ d·ª•: ph·∫£i tr√™n 10 tu·ªïi)
                let birthDate = new Date(dateOfBirth);
                const today = new Date();
                let age = today.getFullYear() - birthDate.getFullYear();
                const monthDiff = today.getMonth() - birthDate.getMonth();
                
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                    age--;
                }

                if (age < 10) {
                    showError('dateOfBirth', 'B·∫°n ph·∫£i tr√™n 10 tu·ªïi ƒë·ªÉ ƒëƒÉng k√Ω');
                    isValid = false;
                }

                // Ki·ªÉm tra ng√†y sinh kh√¥ng ƒë∆∞·ª£c trong t∆∞∆°ng lai
                if (birthDate > today) {
                    showError('dateOfBirth', 'Ng√†y sinh kh√¥ng h·ª£p l·ªá');
                    isValid = false;
                }
            }

            return isValid;
        }

        function showError(fieldName, message) {
            const input = document.getElementById(fieldName);
            const errorElement = document.getElementById(fieldName + 'Error');
            
            input.classList.add('error');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        document.getElementById('registerForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    if (!validateForm()) {
        return;
    }

    const loadingSpinner = document.getElementById('loadingSpinner');
    const submitButton = document.querySelector('.btn-register');
    
    // Show loading state
    loadingSpinner.style.display = 'inline-block';
    submitButton.disabled = true;
    submitButton.style.opacity = '0.7';

    // L·∫•y d·ªØ li·ªáu t·ª´ form
    const formData = {
        name: this.name.value,
        username: this.username.value,
        email: this.email.value,
        phone: this.phone.value,
        password: this.password.value,
        confirmPassword: this.confirmPassword.value,
        gender: this.gender.value,
        dateOfBirth: this.dateOfBirth.value,
    };

    // G·ªçi API ƒëƒÉng k√Ω
    fetch('/auth/register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            const successMessage = document.getElementById('successMessage');
            successMessage.textContent = data.message;
            successMessage.style.display = 'block';
            
            // Reset form
            this.reset();
            
            // Redirect sau 3 gi√¢y
            setTimeout(() => {
                window.location.href = '/auth/login';
            }, 3000);
        } else {
            // Hi·ªÉn th·ªã l·ªói
            alert(data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i!');
    })
    .finally(() => {
        // ·∫®n loading state
        loadingSpinner.style.display = 'none';
        submitButton.disabled = false;
        submitButton.style.opacity = '1';
    });
});
    

        // Real-time validation
        document.querySelectorAll('.form-control').forEach(input => {
            input.addEventListener('blur', function() {
                if (this.value.trim()) {
                    // Validate individual field
                    const fieldName = this.name;
                    let isValid = true;
                    
                    switch (fieldName) {
                        case 'email':
                            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                            if (!emailRegex.test(this.value)) {
                                showError(fieldName, 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
                                isValid = false;
                            }
                            break;
                        case 'phone':
                            const phoneRegex = /^(0[3|5|7|8|9])+([0-9]{8})$/;
                            if (!phoneRegex.test(this.value)) {
                                showError(fieldName, 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (VD: 0987654321)');
                                isValid = false;
                            }
                            break;
                        case 'username':
                            const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
                            if (!usernameRegex.test(this.value)) {
                                showError(fieldName, 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ 3-20 k√Ω t·ª±, ch·ªâ ch·ª©a ch·ªØ, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi');
                                isValid = false;
                            }
                            break;
                        case 'password':
                            if (this.value.length < 6) {
                                showError(fieldName, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
                                isValid = false;
                            }
                            break;
                        case 'confirmPassword':
                            const password = document.getElementById('password').value;
                            if (this.value !== password) {
                                showError(fieldName, 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng tr√πng kh·ªõp');
                                isValid = false;
                            }
                            break;
                        case 'dateOfBirth':
                        let birthDate = new Date(this.value);
                        const today = new Date();
                        let age = today.getFullYear() - birthDate.getFullYear();
                        const monthDiff = today.getMonth() - birthDate.getMonth();
                        
                        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                            age--;
                        }

                        if (age < 10) {
                            showError(fieldName, 'B·∫°n ph·∫£i tr√™n 10 tu·ªïi ƒë·ªÉ ƒëƒÉng k√Ω');
                            isValid = false;
                        }

                        if (birthDate > today) {
                            showError(fieldName, 'Ng√†y sinh kh√¥ng h·ª£p l·ªá');
                            isValid = false;
                        }
                        break;

                        case 'gender':
                            if (!this.value) {
                                showError(fieldName, 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh');
                                isValid = false;
                            }
                            break;
                                }
                                
                                if (isValid) {
                                    this.classList.remove('error');
                                    document.getElementById(fieldName + 'Error').style.display = 'none';
                                }
                    }
            });
        });

        // Add some fruit emojis floating effect
        function createFloatingFruit() {
            const fruits = ['üçé', 'üçä', 'üçå', 'üçá', 'ü•ù', 'üçì', 'ü•≠', 'üçë'];
            const fruit = document.createElement('div');
            fruit.innerHTML = fruits[Math.floor(Math.random() * fruits.length)];
            fruit.style.position = 'fixed';
            fruit.style.left = Math.random() * 100 + 'vw';
            fruit.style.top = '100vh';
            fruit.style.fontSize = '24px';
            fruit.style.opacity = '0.3';
            fruit.style.pointerEvents = 'none';
            fruit.style.zIndex = '1';
            fruit.style.animation = `floatUp ${3 + Math.random() * 3}s ease-out forwards`;
            document.body.appendChild(fruit);

            setTimeout(() => {
                fruit.remove();
            }, 6000);
        }

        function startFloatingFruits() {
            setInterval(createFloatingFruit, 1000);
        }

        // Start floating fruits effect
        startFloatingFruits();
    </script>