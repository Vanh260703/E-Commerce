<style>
    .order-container {
        max-width: 1000px;
        margin: 20px auto;
        padding: 0 15px;
    }

    .order-header {
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        padding: 25px;
        border-radius: 12px;
        text-align: center;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    .order-header h1 {
        font-size: 2em;
        margin-bottom: 8px;
    }

    .order-content {
        display: grid;
        grid-template-columns: 1fr 400px;
        gap: 30px;
    }

    .order-form {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }

    .order-summary {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        height: fit-content;
        position: sticky;
        top: 20px;
    }

    .section-title {
        font-size: 1.3em;
        color: #333;
        margin-bottom: 20px;
        padding-bottom: 8px;
        border-bottom: 2px solid #4CAF50;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        font-weight: 600;
        color: #333;
        margin-bottom: 5px;
    }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 1em;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #4CAF50;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .payment-methods {
        margin: 20px 0;
    }

    .payment-option {
        display: flex;
        align-items: center;
        padding: 15px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .payment-option:hover {
        border-color: #4CAF50;
        background-color: #f8fff8;
    }

    .payment-option.selected {
        border-color: #4CAF50;
        background-color: #e8f5e8;
    }

    .payment-option input[type="radio"] {
        margin-right: 10px;
        transform: scale(1.2);
    }

    .payment-icon {
        width: 30px;
        height: 30px;
        margin-right: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f0f0f0;
        border-radius: 6px;
        font-size: 1.2em;
    }

    .banking-options {
        margin-left: 40px;
        margin-top: 10px;
        display: none;
    }

    .banking-options.show {
        display: block;
    }

    .banking-option {
        display: flex;
        align-items: center;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        margin-bottom: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .banking-option:hover {
        border-color: #4CAF50;
        background-color: #f8fff8;
    }

    .banking-option.selected {
        border-color: #4CAF50;
        background-color: #e8f5e8;
    }

    .banking-icon {
        width: 25px;
        height: 25px;
        margin-right: 8px;
        border-radius: 4px;
    }

    .order-item {
        display: flex;
        align-items: center;
        padding: 15px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .order-item:last-child {
        border-bottom: none;
    }

    .item-image {
        width: 50px;
        height: 50px;
        border-radius: 6px;
        object-fit: cover;
        margin-right: 12px;
    }

    .item-info {
        flex: 1;
    }

    .item-name {
        font-weight: 600;
        color: #333;
        margin-bottom: 3px;
    }

    .item-details {
        font-size: 0.9em;
        color: #666;
    }

    .item-price {
        font-weight: 600;
        color: #4CAF50;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        font-size: 1em;
    }

    .summary-row.total {
        border-top: 2px solid #e0e0e0;
        margin-top: 15px;
        padding-top: 15px;
        font-size: 1.2em;
        font-weight: 700;
        color: #333;
    }

    .order-buttons {
        display: flex;
        gap: 15px;
        margin-top: 30px;
    }

    .btn-place-order {
        flex: 1;
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        padding: 15px 30px;
        border: none;
        border-radius: 8px;
        font-size: 1.1em;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-place-order:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
    }

    .btn-place-order:disabled {
        background: #ccc;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .btn-back {
        background: #6c757d;
        color: white;
        padding: 15px 25px;
        border: none;
        border-radius: 8px;
        font-size: 1em;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
    }

    .btn-back:hover {
        background: #5a6268;
        transform: translateY(-1px);
    }

    .required {
        color: #e74c3c;
    }

    .alert {
        padding: 12px 15px;
        border-radius: 6px;
        margin-bottom: 20px;
        display: none;
    }

    .alert.error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .alert.success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    @media (max-width: 768px) {
        .order-content {
            grid-template-columns: 1fr;
        }
        
        .order-summary {
            position: relative;
            top: 0;
        }
        
        .form-row {
            grid-template-columns: 1fr;
        }
        
        .order-buttons {
            flex-direction: column;
        }
    }
</style>

<div class="order-container">
    <div class="order-header">
        <h1><i class="fas fa-clipboard-check"></i> Xác Nhận Đơn Hàng</h1>
        <p>Vui lòng kiểm tra thông tin và chọn phương thức thanh toán</p>
    </div>

    <div id="alert" class="alert"></div>

    <div class="order-content">
        <!-- Form đặt hàng -->
        <div class="order-form">
            <form id="orderForm" onsubmit="submitOrder(event)">
                <input type="hidden" id="voucher_id" name="voucherId" value="{{voucherId}}">
                <input type="hidden" id="subtotal" name="subtotal" value="{{subtotal}}">
                <input type="hidden" id="discount" name="discount" value="{{discount}}">
                <!-- Thông tin giao hàng -->
                <div class="section-title">
                    <i class="fas fa-truck"></i>
                    Thông Tin Giao Hàng
                </div>

                <div class="form-group">
                    <label for="fullName">Họ và tên <span class="required">*</span></label>
                    <input type="text" id="fullName" name="recipientName" class="form-control" 
                           value="{{customer.name}}" required>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="phone">Số điện thoại <span class="required">*</span></label>
                        <input type="tel" id="phone" name="phone" class="form-control" 
                               value="{{customer.phone}}" required pattern="[0-9]{10,11}">
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="email" id="email" name="email" class="form-control" 
                               value="{{customer.email}}">
                    </div>
                </div>

                <div class="form-group">
                    <label for="addressSelect">Địa chỉ giao hàng <span class="required">*</span></label>
                    <select id="addressSelect" name="deliveryAddress" class="form-control" required>
                            {{#if customer.defaultAddress}}
                                <option value="{{customer.defaultAddress}}" selected>{{customer.defaultAddress}}</option>
                                {{#each customer.addresses}}
                                    {{#unless this.isDefault}}
                                        <option value="{{this.shortAddress}}">{{this.shortAddress}}</option>
                                    {{/unless}}
                                {{/each}}
                            {{/if}}
                        
                        <option value="new">+ Thêm địa chỉ mới</option>
                    </select>
                </div>

                <div class="form-group" id="newAddressGroup" style="display: none;">
                    <label for="newAddress">Địa chỉ mới</label>
                    <textarea id="newAddress" name="newAddress" class="form-control" rows="3"></textarea>
                </div>

                <div class="form-group">
                    <label for="note">Ghi chú đặc biệt</label>
                    <textarea id="note" name="note" class="form-control" rows="2" 
                              placeholder="Ví dụ: Giao hàng sau 5h chiều, gọi trước khi giao..."></textarea>
                </div>

                <!-- Phương thức thanh toán -->
                <div class="section-title">
                    <i class="fas fa-credit-card"></i>
                    Phương Thức Thanh Toán
                </div>

                <div class="payment-methods">
                    <div class="payment-option" onclick="selectPayment('cod', event)">
                        <input type="radio" name="paymentMethod" value="cod" id="cod" checked>
                        <div class="payment-icon" style="background-color: #ff9800; color: white;">
                            <i class="fas fa-money-bill"></i>
                        </div>
                        <label for="cod" style="cursor: pointer;">
                            <strong>Thanh toán khi nhận hàng (COD)</strong><br>
                            <small>Thanh toán bằng tiền mặt khi nhận hàng</small>
                        </label>
                    </div>

                    <div class="payment-option" onclick="selectPayment('banking', event)">
                        <input type="radio" name="paymentMethod" value="banking" id="banking">
                        <div class="payment-icon" style="background-color: #2196F3; color: white;">
                            <i class="fas fa-university"></i>
                        </div>
                        <label for="banking" style="cursor: pointer;">
                            <strong>Chuyển khoản ngân hàng</strong><br>
                            <small>Thanh toán trực tuyến qua ví điện tử</small>
                        </label>
                    </div>

                    <div id="bankingOptions" class="banking-options">
                        <div class="banking-option" onclick="selectBankingMethod('momo', event)">
                            <input type="radio" name="bankingMethod" value="momo" id="momo">
                            <img class="banking-icon" alt="MoMo"
                                src='data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25"><rect width="25" height="25" rx="4" fill="%23d82d8b"/><text x="50%" y="55%" font-family="Arial" font-size="14" fill="white" text-anchor="middle" dominant-baseline="middle">M</text></svg>'>
                            <label for="momo" style="cursor: pointer;">
                                Ví MoMo
                            </label>
                        </div>

                        <div class="banking-option" onclick="selectBankingMethod('vnpay', event)">
                            <input type="radio" name="bankingMethod" value="vnpay" id="vnpay">
                            <img class="banking-icon" alt="VNPay"
                                src='data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25"><rect width="25" height="25" rx="4" fill="%231976d2"/><text x="50%" y="55%" font-family="Arial" font-size="14" fill="white" text-anchor="middle" dominant-baseline="middle">V</text></svg>'>
                            <label for="vnpay" style="cursor: pointer;">
                                VNPay
                            </label>
                        </div>
                    </div>
                </div>

                <div class="order-buttons">
                    <a href="/cart" class="btn-back">
                        <i class="fas fa-arrow-left"></i> Quay lại giỏ hàng
                    </a>
                    <button type="submit" class="btn-place-order" id="submitBtn">
                        <i class="fas fa-check-circle"></i> Đặt Hàng Ngay
                    </button>
                </div>
                <input type="hidden" name="totalPrice" value="{{totalPrice}}">
            </form>
        </div>

        <!-- Tóm tắt đơn hàng -->
        <div class="order-summary">
            <div class="section-title">
                <i class="fas fa-receipt"></i>
                Tóm Tắt Đơn Hàng
            </div>

            <!-- Danh sách sản phẩm -->
            <div class="order-items">
                {{#each cartItems}}
                <div class="order-item">
                    <img src="{{this.product.imageURL.[0].thumbnail}}" alt="{{this.name}}" class="item-image">
                    <div class="item-info">
                        <div class="item-name">{{this.name}}</div>
                        <div class="item-details">
                            SL: {{this.quantity}} {{this.unit}} × {{#if (gt this.product.priceHaveDiscount 0)}} {{formatMoney this.product.priceHaveDiscount}} {{else}} {{formatMoney this.product.price}} {{/if}}
                        </div>
                    </div>
                    <div class="item-price">{{formatMoney this.subtotal}}</div>
                </div>
                {{/each}}
            </div>

            <!-- Thông tin thanh toán -->
            <div class="order-total">
                <div class="summary-row">
                    <span>Tạm tính ({{totalQuantity}} sản phẩm):</span>
                    <span>{{formatMoney subtotal}}</span>
                </div>
                {{#if discount}}
                <div class="summary-row">
                    <span>Giảm giá:</span>
                    <span style="color: #4CAF50;">-{{formatMoney discount}}</span>
                </div>
                {{/if}}
                <div class="summary-row total">
                    <span>Tổng thanh toán:</span>
                    <span>{{formatMoney totalPrice}}</span>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Chọn phương thức thanh toán
    function selectPayment(method, ev) {
        const bankingOptions = document.getElementById('bankingOptions');

        // reset trạng thái
        document.querySelectorAll('.payment-option').forEach(o => o.classList.remove('selected'));

        // chọn option
        const radio = document.getElementById(method);
        if (radio) radio.checked = true;

        // ưu tiên element từ event, nếu không có thì tự tìm wrapper
        const container = ev?.currentTarget || radio?.closest('.payment-option');
        container?.classList.add('selected');

        if (method === 'banking') {
            bankingOptions.classList.add('show');
            // chỉ auto chọn MoMo nếu chưa chọn gì
            const chosen = document.querySelector('input[name="bankingMethod"]:checked');
            if (!chosen) selectBankingMethod('momo'); // gọi không cần event
        } else {
            bankingOptions.classList.remove('show');
            document.querySelectorAll('input[name="bankingMethod"]').forEach(m => m.checked = false);
            document.querySelectorAll('.banking-option').forEach(o => o.classList.remove('selected'));
        }
    }

    // Chọn phương thức banking
    function selectBankingMethod(method, ev) {
        document.querySelectorAll('.banking-option').forEach(o => o.classList.remove('selected'));

        const radio = document.getElementById(method);
        if (radio) radio.checked = true;

        const container = ev?.currentTarget || radio?.closest('.banking-option');
        container?.classList.add('selected');
    }


    // Hiển thị thông báo
    function showAlert(message, type = 'error') {
        const alert = document.getElementById('alert');
        alert.textContent = message;
        alert.className = `alert ${type}`;
        alert.style.display = 'block';
        
        // Scroll to top để user thấy thông báo
        window.scrollTo({ top: 0, behavior: 'smooth' });
        
        // Auto hide after 5 seconds
        setTimeout(() => {
            alert.style.display = 'none';
        }, 5000);
    }

    // Xử lý submit form
    async function submitOrder(event) {
        event.preventDefault();
        
        const submitBtn = document.getElementById('submitBtn');
        const originalText = submitBtn.innerHTML;
        
        // Disable button và show loading
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
        
        try {
            const formData = new FormData(event.target);
            const orderData = Object.fromEntries(formData);
            
            // Validate payment method
            if (orderData.paymentMethod === 'banking' && !orderData.bankingMethod) {
                throw new Error('Vui lòng chọn phương thức thanh toán ngân hàng');
            }
            
            const response = await fetch('/order/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(orderData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Redirect to success page or payment gateway
                if (result.paymentUrl) {
                    window.location.href = result.paymentUrl;
                } else {
                    window.location.href = `/order/${result.orderId}/success`;
                }
            } else {
                throw new Error(result.message || 'Có lỗi xảy ra khi tạo đơn hàng');
            }
            
        } catch (error) {
            console.error('Error:', error);
            showAlert(error.message);
            
            // Re-enable button
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        }
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        // Set default payment method
        selectPayment('cod');
        
        // Format phone number input
        const phoneInput = document.getElementById('phone');
        phoneInput.addEventListener('input', function() {
            this.value = this.value.replace(/[^0-9]/g, '');
        });
        
        // Auto-resize textarea
        const textareas = document.querySelectorAll('textarea');
        textareas.forEach(textarea => {
            textarea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = this.scrollHeight + 'px';
            });
        });
    });

    document.getElementById('addressSelect').addEventListener('change', function() {
        if (this.value === 'new') {
            document.getElementById('newAddressGroup').style.display = 'block';
        } else {
            document.getElementById('newAddressGroup').style.display = 'none';
        }
    });

    function formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        });
    }
</script>