{{!-- views/orders.hbs --}}
<style>

    /* orders.css */
    .orders-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Header */
    .page-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .page-header h1 {
        font-size: 2.5rem;
        color: #2c3e50;
        margin-bottom: 10px;
        font-weight: 700;
    }

    .page-header p {
        color: #7f8c8d;
        font-size: 1.1rem;
    }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
    }

    .stat-card {
        background: linear-gradient(135deg, #74b9ff, #0984e3);
        color: white;
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(116, 185, 255, 0.4);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    /* Filters */
    .filters-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        gap: 20px;
        flex-wrap: wrap;
    }

    .filter-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 12px 20px;
        border: none;
        border-radius: 25px;
        background: #e9ecef;
        color: #495057;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 500;
        font-size: 0.9rem;
    }

    .filter-btn:hover,
    .filter-btn.active {
        background: linear-gradient(135deg, #74b9ff, #0984e3);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(116, 185, 255, 0.4);
    }

    .search-box {
        position: relative;
        min-width: 250px;
    }

    .search-box input {
        width: 100%;
        padding: 12px 45px 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 25px;
        font-size: 0.9rem;
        transition: border-color 0.3s ease;
    }

    .search-box input:focus {
        outline: none;
        border-color: #74b9ff;
    }

    .search-icon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #adb5bd;
    }

    /* Orders List */
    .orders-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .order-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        border: 1px solid #f8f9fa;
    }

    .order-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.12);
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 10px;
    }

    .order-info h3 {
        color: #2c3e50;
        font-size: 1.3rem;
        margin-bottom: 5px;
    }

    .order-date {
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    /* Status Badges */
    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
    }

    .status-confirmed {
        background: #cce5ff;
        color: #0066cc;
    }

    .status-shipping {
        background: #e1ecf4;
        color: #39739d;
    }

    .status-completed {
        background: #d4edda;
        color: #155724;
    }

    .status-cancelled {
        background: #f8d7da;
        color: #721c24;
    }

    /* Order Content */
    .order-content {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
        gap: 20px;
        flex-wrap: wrap;
    }

    .order-items h4 {
        color: #495057;
        font-size: 1rem;
        margin-bottom: 10px;
    }

    .items-preview {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .item-preview {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .item-image {
        width: 50px;
        height: 50px;
        border-radius: 8px;
        object-fit: cover;
    }

    .item-details {
        display: flex;
        flex-direction: column;
    }

    .item-name {
        font-weight: 500;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .item-quantity {
        color: #7f8c8d;
        font-size: 0.8rem;
    }

    .more-items {
        color: #74b9ff;
        font-style: italic;
        font-size: 0.9rem;
    }

    /* Order Summary */
    .order-summary {
        text-align: right;
    }

    .order-total {
        font-size: 1.4rem;
        color: #e74c3c;
        margin-bottom: 15px;
    }

    .order-actions {
        display: flex;
        gap: 10px;
    }

    /* Buttons */
    .btn-detail,
    .btn-cancel,
    .btn-reorder,
    .btn-track,
    .btn-primary {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .btn-detail {
        background: #74b9ff;
        color: white;
    }

    .btn-detail:hover {
        background: #0984e3;
        transform: translateY(-2px);
    }

    .btn-cancel {
        background: #fd79a8;
        color: white;
    }

    .btn-cancel:hover {
        background: #e84393;
    }

    .btn-reorder {
        background: #00b894;
        color: white;
    }

    .btn-reorder:hover {
        background: #00a085;
    }

    .btn-track {
        background: #a29bfe;
        color: white;
    }

    .btn-track:hover {
        background: #6c5ce7;
    }

    .btn-vnpay,
    .btn-momo,
    .btn-cod {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        color: white;
    }

    .btn-vnpay {
        background: #1e3a8a;
    }

    .btn-vnpay:hover {
        background: #1e40af;
    }

    .btn-momo {
        background: #d946ef;
    }

    .btn-momo:hover {
        background: #c026d3;
    }

    .btn-cod {
        background: #059669;
    }

    .btn-cod:hover {
        background: #047857;
    }

    .payment-pending {
        background: #fef3c7;
        padding: 20px;
        border-radius: 10px;
        border: 1px solid #f59e0b;
        margin-top: 15px;
    }

    .pending-message {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .warning-icon {
        font-size: 1.2rem;
    }

    .pending-message p {
        color: #92400e;
        font-weight: 500;
        margin: 0;
        flex: 1;
    }

    .payment-options {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .payment-icon {
        margin-right: 5px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #74b9ff, #0984e3);
        color: white;
        padding: 15px 30px;
        font-size: 1.1rem;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(116, 185, 255, 0.4);
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
    }

    .empty-icon {
        font-size: 4rem;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .empty-state h3 {
        color: #2c3e50;
        font-size: 1.5rem;
        margin-bottom: 10px;
    }

    .empty-state p {
        color: #7f8c8d;
        margin-bottom: 30px;
        font-size: 1.1rem;
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 40px;
    }

    .page-btn {
        padding: 10px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        color: #495057;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .page-btn:hover,
    .page-btn.active {
        background: #74b9ff;
        color: white;
        border-color: #74b9ff;
    }

    
    /* Order Detail */
    .detail-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
        gap: 10px;
    }

    .detail-section {
        margin-bottom: 30px;
    }

    .detail-section h4 {
        color: #2c3e50;
        font-size: 1.2rem;
        margin-bottom: 15px;
        border-bottom: 2px solid #e9ecef;
        padding-bottom: 10px;
    }

    .shipping-info p {
        margin-bottom: 8px;
        color: #495057;
    }

    .detail-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 15px;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .detail-item img {
        width: 60px;
        height: 60px;
        border-radius: 8px;
        object-fit: cover;
    }

    .item-info {
        flex: 1;
    }

    .item-info h5 {
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .item-info p {
        color: #7f8c8d;
        font-size: 0.9rem;
        margin: 2px 0;
    }

    .item-total {
        font-weight: bold;
        color: #e74c3c;
        font-size: 1.1rem;
    }

    .order-summary-detail {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        padding: 5px 0;
    }

    .summary-row.total {
        border-top: 2px solid #dee2e6;
        padding-top: 15px;
        margin-top: 15px;
        font-size: 1.1rem;
    }

    .loading,
    .error {
        text-align: center;
        padding: 40px;
        color: #7f8c8d;
        font-style: italic;
    }

    .error {
        color: #e74c3c;
    }


    .payment-warning {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 12px;
        color: #856404;
        font-size: 14px;
        line-height: 1.4;
        display: flex;
        align-items: flex-start;
        gap: 8px;
    }

    .payment-warning i {
        color: #f39c12;
        margin-top: 2px;
        font-size: 16px;
    }

    .btn-payment {
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 13px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            transition: all 0.2s;
            font-weight: 500;
            min-width: 140px;
            justify-content: center;
        }

        .btn-payment:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .btn-payment:disabled {
            cursor: not-allowed;
            opacity: 0.6;
            transform: none;
            box-shadow: none;
        }

        .btn-payment.momo {
            background: linear-gradient(45deg, #a50064, #d82d8b);
            color: white;
        }

        .btn-payment.momo:hover:not(:disabled) {
            background: linear-gradient(45deg, #8a0054, #c41f7a);
        }

        .btn-payment.vnpay {
            background: linear-gradient(45deg, #1e88e5, #42a5f5);
            color: white;
        }

        .btn-payment.vnpay:hover:not(:disabled) {
            background: linear-gradient(45deg, #1976d2, #2196f3);
        }

        .btn-payment.cod {
            background: linear-gradient(45deg, #43a047, #66bb6a);
            color: white;
        }

        .btn-payment.cod:hover:not(:disabled) {
            background: linear-gradient(45deg, #388e3c, #4caf50);
        }

        #orderDetailModal .modal-dialog {
            max-width: 90%; /* Tùy chỉnh chiều rộng tối đa, ví dụ 90% của màn hình */
        }

        #orderDetailModal .modal-body {
            max-height: 70vh; /* Giới hạn chiều cao tối đa là 70% viewport height */
            overflow-y: auto; /* Thêm thanh cuộn dọc khi nội dung vượt quá */
        }


    /* Responsive */
    @media (max-width: 768px) {
        .orders-page {
            padding: 15px;
        }

        .payment-options {
            flex-direction: column;
        }

        .btn-payment {
           width: 100%;
            min-width: auto;
        }
        
        .page-header h1 {
            font-size: 2rem;
        }
        
        .filters-section {
            flex-direction: column;
            align-items: stretch;
        }
        
        .filter-buttons {
            justify-content: center;
        }
        
        .search-box {
            min-width: auto;
        }
        
        .order-header {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .order-content {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .order-summary {
            text-align: left;
            width: 100%;
        }
        
        .order-actions {
            width: 100%;
            justify-content: flex-start;
        }
        
        .modal-content {
            margin: 10px;
        }
        
        .detail-header {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .detail-item {
            flex-direction: column;
            text-align: center;
        }
        
        .summary-row {
            font-size: 0.9rem;
        }
    }
</style>
<div class="orders-page">
    <div class="page-header">
        <h1>Đơn Hàng Của Tôi</h1>
        <p>Quản lý và theo dõi tất cả đơn hàng của bạn</p>
    </div>

    <!-- Thống kê tổng quan -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-number">{{totalOrders}}</div>
            <div class="stat-label">Tổng đơn hàng</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{{pendingOrders}}</div>
            <div class="stat-label">Đang xử lý</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{{completedOrders}}</div>
            <div class="stat-label">Hoàn thành</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{{formatCurrency totalAmount}}</div>
            <div class="stat-label">Tổng giá trị</div>
        </div>
    </div>

    <!-- Bộ lọc -->
    <div class="filters-section">
        <div class="filter-buttons">
            <button class="filter-btn active" data-status="all">Tất cả</button>
            <button class="filter-btn" data-status="pending">Đang xử lý</button>
            <button class="filter-btn" data-status="confirmed">Đã xác nhận</button>
            <button class="filter-btn" data-status="shipped">Đang giao</button>
            <button class="filter-btn" data-status="delivered">Hoàn thành</button>
            <button class="filter-btn" data-status="cancelled">Đã hủy</button>
        </div>
        <div class="search-box">
            <input type="text" id="searchOrder" placeholder="Tìm kiếm theo mã đơn hàng...">
            <i class="search-icon">🔍</i>
        </div>
    </div>

    <!-- Danh sách đơn hàng -->
    <div class="orders-list">
        {{#if orders}}
            {{#each orders}}
            <div class="order-card" data-status="{{status}}">
                <div class="order-header">
                    <div class="order-info">
                        <h3 class="order-id">Đơn hàng <strong>#{{this._id}}</strong></h3>
                        <span class="order-date">{{formatDate createdAt}}</span>
                    </div>
                    <div class="order-status">
                        <span class="status-badge status-{{status}}">
                            {{#if (eq status 'pending')}}Đang xử lý{{/if}}
                            {{#if (eq status 'confirmed')}}Đã xác nhận{{/if}}
                            {{#if (eq status 'shipped')}}Đang giao hàng{{/if}}
                            {{#if (eq status 'delivered')}}Hoàn thành{{/if}}
                            {{#if (eq status 'cancelled')}}Đã hủy{{/if}}
                        </span>
                    </div>
                </div>

                <div class="order-content">
                    <div class="order-items">
                        <h4>Sản phẩm ({{items.length}} món):</h4>
                        <div class="items-preview">
                            {{#each items}}
                                {{#if @first}}
                                <div class="item-preview">
                                    <img src="{{product.imageURL.[0].thumbnail}}" alt="{{name}}" class="item-image">
                                    <div class="item-details">
                                        <span class="item-name">{{product.name}}</span>
                                        <span class="item-quantity">x{{quantity}}</span>
                                    </div>
                                </div>
                                {{/if}}
                            {{/each}}
                            {{#if (gt items.length 1)}}
                                <span class="more-items">và {{minus items.length 1}} sản phẩm khác</span>
                            {{/if}}
                        </div>
                    </div>
                        {{#if (isNotActive isActive)}}
                        <div class="order-total">
                            <strong>{{formatCurrency totalAmount}}</strong>
                        </div>
                        <div class="payment-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>Đơn hàng của bạn đang chưa được hoàn tất, hãy chọn phương thức thanh toán để hoàn thành đơn hàng</span>
                        </div>
                        <div class="payment-actions">
                            <div class="payment-options">
                                <button class="btn-payment momo" onclick="processPayment('{{_id}}', 'banking', 'momo', {{totalAmount}})">
                                    <i class="fab fa-cc-visa"></i>
                                    Thanh toán MoMo
                                </button>
                                <button class="btn-payment vnpay" onclick="processPayment('{{_id}}', 'banking', 'vnpay', {{totalAmount}})">
                                    <i class="fas fa-credit-card"></i>
                                    Thanh toán VNPay
                                </button>
                                <button class="btn-payment cod" onclick="processPayment('{{_id}}', 'cod', {{totalAmount}})">
                                    <i class="fas fa-money-bill-wave"></i>
                                    Đổi sang tiền mặt
                                    </button>
                            </div>
                        </div>
                        <button class="btn-detail" onclick="showOrderDetail('{{_id}}')">
                                Chi tiết
                        </button>
                        {{else}}
                        <div class="order-summary">
                        <div class="order-total">
                            <strong>{{formatCurrency totalAmount}}</strong>
                        </div>
                        <div class="order-actions">
                            <button class="btn-detail" onclick="showOrderDetail('{{_id}}')">
                                Chi tiết
                            </button>
                            {{#if (canTrack status)}}
                            <button type="button" class="btn btn-success" onclick="trackOrder('{{order_code}}')">
                                Theo dõi đơn hàng
                            </button>
                            {{/if}}
                            {{#if (twoConditions (canCancel deliveryStatus) (df status 'cancelled'))}}
                            <button class="btn-cancel"  onclick="cancelOrder('{{_id}}')">
                                Hủy đơn
                            </button>
                            {{/if}}
                            {{#if (canReorder status)}}
                            <button class="btn-reorder" onclick="reorder('{{_id}}')">
                                Đặt lại
                            </button>
                            {{/if}}
                        </div>
                    </div>
                    {{/if}}
                </div>
            </div>
            {{/each}}
        {{else}}
            <div class="empty-state">
                <div class="empty-icon">📦</div>
                <h3>Chưa có đơn hàng nào</h3>
                <p>Hãy bắt đầu mua sắm để tạo đơn hàng đầu tiên!</p>
                <a href="/products" class="btn-primary">Mua sắm ngay</a>
            </div>
        {{/if}}
    </div>

    <!-- Phân trang -->
    {{#if pagination}}
    <div class="pagination">
        {{#if pagination.hasPrev}}
            <a href="?page={{pagination.prevPage}}" class="page-btn">‹ Trước</a>
        {{/if}}
        
        {{#each pagination.pages}}
            {{#if isCurrent}}
                <span class="page-btn active">{{page}}</span>
            {{else}}
                <a href="?page={{page}}" class="page-btn">{{page}}</a>
            {{/if}}
        {{/each}}
        
        {{#if pagination.hasNext}}
            <a href="?page={{pagination.nextPage}}" class="page-btn">Tiếp ›</a>
        {{/if}}
    </div>
    {{/if}}
</div>

<!-- Modal chi tiết đơn hàng -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl"> <!-- Sử dụng modal-xl cho chiều rộng lớn hơn -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailModalLabel">Chi Tiết Đơn Hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="orderDetailContent" style="max-height: 70vh; overflow-y: auto;">
                <!-- Nội dung chi tiết sẽ được load bằng AJAX -->
            </div>
        </div>
    </div>
</div>

<!-- Modal hủy đơn hàng -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelOrderModalLabel">Xác nhận hủy đơn hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn hủy đơn hàng <strong id="orderIdDisplay"></strong> không?</p>
                <div class="mb-3">
                    <label for="cancelReason" class="form-label">Lý do hủy (tùy chọn):</label>
                    <select class="form-select" id="cancelReason">
                        <option value="">-- Chọn lý do --</option>
                        <option value="changed_mind">Đổi ý không muốn mua nữa</option>
                        <option value="found_better_price">Tìm được giá tốt hơn</option>
                        <option value="delivery_too_long">Thời gian giao hàng quá lâu</option>
                        <option value="payment_issue">Vấn đề với thanh toán</option>
                        <option value="other">Lý do khác</option>
                    </select>
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Lưu ý:</strong> Sau khi hủy đơn hàng, bạn không thể hoàn tác hành động này.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-danger" id="confirmCancelBtn">
                    <i class="fas fa-times me-2"></i>Xác nhận hủy
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// JavaScript functions
function showOrderDetail(orderId) {
    const modal = new bootstrap.Modal(document.getElementById('orderDetailModal'));
    const content = document.getElementById('orderDetailContent');
    
    content.innerHTML = '<div class="loading">Đang tải...</div>';
    modal.show();
    
    fetch(`/user/orders/${orderId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                content.innerHTML = generateOrderDetailHTML(data.order);
            } else {
                content.innerHTML = `<div class="error">${data.message}</div>`;
            }
        })
        .catch(error => {
            console.log(error);
            content.innerHTML = '<div class="error">Không thể tải thông tin đơn hàng</div>';
        });
}

function closeOrderDetail() {
    const modal = bootstrap.Modal.getInstance(document.getElementById('orderDetailModal'));
    if (modal) {
        modal.hide();
    }
}

function cancelOrder(orderId) {
    // Hiển thị modal và điền thông tin đơn hàng
    const modal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
    document.getElementById('orderIdDisplay').textContent = `#${orderId}`;
    
    // Gắn sự kiện cho nút xác nhận hủy
    const confirmBtn = document.getElementById('confirmCancelBtn');
    confirmBtn.onclick = function() {
        const reason = document.getElementById('cancelReason').value;
        
        // Hiển thị loading trên nút
        confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang xử lý...';
        confirmBtn.disabled = true;

        // Gửi yêu cầu hủy đơn hàng với lý do
        fetch(`/order/${orderId}/cancel`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ reason: reason })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                modal.hide();
                location.reload();
            } else {
                alert('Không thể hủy đơn hàng: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Có lỗi xảy ra. Vui lòng thử lại sau.');
        })
        .finally(() => {
            confirmBtn.innerHTML = '<i class="fas fa-times me-2"></i>Xác nhận hủy';
            confirmBtn.disabled = false;
        });
    };

    // Hiển thị modal
    modal.show();
}

async function reorder(orderId) {
    try {
        const response = await fetch(`/order/${orderId}/reorder`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        const result = await response.json();
        if (result.success) {
            window.location.href = '/cart';
        } else {
            showToast('error', result.message);
        }
    } catch (err) {
        console.log(err);
        showToast('error', 'Có lỗi khi đặt lại đơn hàng');
    }
}

function trackOrder(order_code) {
    window.open(
        `https://tracking.ghn.dev/?order_code=${order_code}`,
        '_blank' // mở ở tab mới
    );
}


// Filter functionality
document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        // Update active button
        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        
        // Filter orders
        const status = this.getAttribute('data-status');
        const orders = document.querySelectorAll('.order-card');
        
        orders.forEach(order => {
            if (status === 'all' || order.getAttribute('data-status') === status) {
                order.style.display = 'block';
            } else {
                order.style.display = 'none';
            }
        });
    });
});

// Search functionality
document.getElementById('searchOrder').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const orders = document.querySelectorAll('.order-card');
    
    orders.forEach(order => {
        const orderNumber = order.querySelector('.order-id').textContent.toLowerCase();
        if (orderNumber.includes(searchTerm)) {
            order.style.display = 'block';
        } else {
            order.style.display = 'none';
        }
    });
});

function generateOrderDetailHTML(order) {
    return `
        <div class="order-detail">
            <div class="detail-header">
                <h3>Đơn hàng #${order._id}</h3>
                <span class="status-badge status-${order.status}">
                    ${getStatusText(order.status)}
                </span>
            </div>
            
            <div class="detail-section">
                <h4>Thông tin giao hàng</h4>
                <div class="shipping-info">
                    <p><strong>Người nhận:</strong> ${order.recipientName}</p>
                    <p><strong>Số điện thoại:</strong> ${order.recipientPhone}</p>
                    <p><strong>Địa chỉ:</strong> ${order.deliveryAddress}</p>
                </div>
            </div>
            
            <div class="detail-section">
                <h4>Sản phẩm đã đặt</h4>
                <div class="items-list">
                    ${order.items.map(item => `
                        <div class="detail-item">
                            <img src="${item.product.imageURL[0].thumbnail}" alt="${item.product.name}">
                            <div class="item-info">
                                <h5>${item.product.name}</h5>
                                <p>Số lượng: ${item.quantity}</p>
                                <p>Giá: ${formatCurrency(checkDiscount(item.product.price, item.product.priceHaveDiscount))}</p>
                            </div>
                            <div class="item-total">
                                ${formatCurrency(item.price)}
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <div class="detail-section">
                <h4>Tổng kết đơn hàng</h4>
                <div class="order-summary-detail">
                    <div class="summary-row">
                        <span>Tạm tính:</span>
                        <span>${formatCurrency(order.subtotal)}</span>
                    </div>
                    <div class="summary-row">
                        <span>Mã giảm giá:</span>
                        <span>${formatCurrency(order.discountAmount)}</span>
                    </div>
                    <div class="summary-row total">
                        <span><strong>Tổng cộng:</strong></span>
                        <span><strong>${formatCurrency(order.totalAmount)}</strong></span>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function getStatusText(status) {
    const statusMap = {
        'pending': 'Đang xử lý',
        'confirmed': 'Đã xác nhận',
        'shipped': 'Đang giao hàng',
        'completed': 'Hoàn thành',
        'cancelled': 'Đã hủy'
    };
    return statusMap[status] || status;
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
    }).format(amount);
}

function checkDiscount(priceDefault, priceHaveDiscount) {
    if (priceHaveDiscount > 0) {
        return priceHaveDiscount;
    }
    return priceDefault;
}

// Change Payment Method
async function processPayment(orderId, paymentMethod, bankingMethod, totalPrice) {
    const button = event.target;
    const originalContent = button.innerHTML;
    
    // Disable all payment buttons for this order
    const paymentActions = button.closest('.payment-actions');
    const allButtons = paymentActions.querySelectorAll('.btn-payment');
    allButtons.forEach(btn => btn.disabled = true);
    
    // Update button text
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
    
    try {
        let apiUrl = '';
        let requestBody = {};
        
        // Determine API endpoint and request body based on payment method
        switch(bankingMethod) {
            case 'momo':
                apiUrl = `/order/retry-payment`
                requestBody = {
                    orderId, 
                    bankingMethod,
                    paymentMethod,
                 };
                break;
            case 'vnpay':
                apiUrl = `/order/retry-payment`
                requestBody = {
                    orderId, 
                    bankingMethod,
                    paymentMethod,
                 };
                break;
        }

        if (paymentMethod === 'cod') {
            apiUrl = `/order/change-to-cod`;
            requestBody = { orderId };
        }
        
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });
        
        const result = await response.json();

        console.log(result);
        
        if (result.success) {
            if (paymentMethod === 'cod') {
                // COD - just reload the page
                showToast('success', 'Đổi phương thức thanh toán thành công');
                location.reload();
            } else {
                // MoMo/VNPay - redirect to payment page
                if (result.payUrl || result.paymentUrl) {
                    window.location.href = result.payUrl || result.paymentUrl;
                } else {
                    showToast('error', 'Có lỗi khi đổi phương thức thanh toán sang Momo');
                    location.reload();
                }
            }
        } else {
            throw new Error(result.message || 'Có lỗi xảy ra');
        }
        
    } catch (error) {
        console.error('Payment error:', error);
        alert(error.message || 'Có lỗi xảy ra. Vui lòng thử lại sau.');
        
        // Re-enable buttons and restore original content
        allButtons.forEach(btn => btn.disabled = false);
        button.innerHTML = originalContent;
    }
}


// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('orderDetailModal');
    if (event.target === modal) {
        modal.style.display = 'none';
    }
}
</script>