<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thông Tin Cá Nhân - Fresh Fruits Store</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4CAF50;
            --primary-dark: #2E7D32;
            --primary-light: #81C784;
            --secondary-color: #FF9800;
            --error-color: #f44336;
            --success-color: #4CAF50;
            --text-color: #333;
            --text-light: #666;
            --border-color: #E8F5E9;
            --bg-gradient: linear-gradient(135deg, #ff9a56 0%, #ff6b35 50%, #f7931e 100%);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: var(--bg-gradient);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .profile-container {
            background: rgba(255, 255, 255, 0.98);
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 900px;
            display: flex;
            overflow: hidden;
        }

        .profile-sidebar {
            width: 280px;
            background: linear-gradient(to bottom, var(--primary-color), var(--primary-dark));
            padding: 40px 20px;
            color: white;
            text-align: center;
        }

        .profile-main {
            flex: 1;
            padding: 40px;
            background: white;
        }

        .profile-avatar {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            border: 4px solid rgba(255, 255, 255, 0.3);
            margin: 0 auto 20px;
            overflow: hidden;
            position: relative;
            cursor: pointer;
        }

        .profile-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .avatar-upload {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.6);
            padding: 8px;
            font-size: 12px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .profile-avatar:hover .avatar-upload {
            opacity: 1;
        }

        .profile-name {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .profile-role {
            font-size: 14px;
            opacity: 0.9;
            margin-bottom: 25px;
        }

        .profile-menu {
            list-style: none;
            text-align: left;
        }

        .profile-menu li {
            margin-bottom: 10px;
        }

        .profile-menu a {
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            padding: 12px 15px;
            border-radius: 10px;
            transition: all 0.3s;
        }

        .profile-menu a:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .profile-menu a.active {
            background: rgba(255, 255, 255, 0.2);
        }

        .profile-menu i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        .section-title {
            font-size: 24px;
            color: var(--text-color);
            margin-bottom: 30px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .btn-edit {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s;
        }

        .btn-edit:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 25px;
        }

        .info-item {
            margin-bottom: 20px;
        }

        .info-label {
            font-size: 14px;
            color: var(--text-light);
            margin-bottom: 8px;
        }

        .info-value {
            font-size: 16px;
            color: var(--text-color);
            font-weight: 500;
        }

        .info-value.verified {
            color: var(--success-color);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .info-value.not-verified {
            color: var(--error-color);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            width: 100%;
            max-width: 500px;
            position: relative;
        }

        .modal-close {
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: var(--text-light);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-color);
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
        }

        /* Thêm vào phần style */
        .input-wrapper {
            position: relative;
        }

        .password-toggle {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #666;
            transition: color 0.3s;
        }

        .password-toggle:hover {
            color: var(--primary-color);
        }

        @media (max-width: 768px) {
            .profile-container {
                flex-direction: column;
            }

            .profile-sidebar {
                width: 100%;
                padding: 30px 20px;
            }

            .profile-avatar {
                width: 120px;
                height: 120px;
            }

            .info-grid {
                grid-template-columns: 1fr;
            }
        }

        /* Thêm vào trong thẻ <style> */
        .alert-messages {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 500px;
            z-index: 1100;
        }

        .alert {
            padding: 16px 20px;
            border-radius: 12px;
            display: none;
            align-items: center;
            justify-content: space-between;
            animation: slideDown 0.3s ease-out;
            margin-bottom: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .alert-success {
            background: linear-gradient(135deg, #E8F5E9 0%, #C8E6C9 100%);
            border: 2px solid #81C784;
            color: #2E7D32;
        }

        .alert-error {
            background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);
            border: 2px solid #ef5350;
            color: #c62828;
        }

        .alert-content {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .alert-icon {
            font-size: 20px;
        }

        .alert-text {
            font-weight: 500;
            font-size: 15px;
        }

        .alert-close {
            background: none;
            border: none;
            color: inherit;
            cursor: pointer;
            padding: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .alert-close:hover {
            background: rgba(0, 0, 0, 0.1);
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }
            20%, 40%, 60%, 80% { transform: translateX(2px); }
        }

        .shake {
            animation: shake 0.5s ease-in-out;
        }


        .address-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            border: 2px solid var(--border-color);
            margin-bottom: 15px;
            position: relative;
            transition: all 0.3s;
        }

        .address-card:hover {
            border-color: var(--primary-color);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .default-badge {
            position: absolute;
            top: -10px;
            right: -10px;
            background: var(--primary-color);
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .address-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid var(--border-color);
        }

        .btn-action {
            padding: 8px 15px;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            border: none;
            transition: all 0.3s;
        }

        .btn-edit { background: #E8F5E9; color: #2E7D32; }
        .btn-delete { background: #FFEBEE; color: #C62828; }
        .btn-default { background: #E3F2FD; color: #1565C0; }

        .btn-action:hover {
            filter: brightness(0.95);
            transform: translateY(-1px);
        }

        /* Add to your existing style section */
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            background: #f8f9fa;
            border-radius: 15px;
            border: 2px dashed #dee2e6;
        }

        .empty-state i {
            font-size: 40px;
            color: #adb5bd;
            margin-bottom: 15px;
        }

        .empty-state p {
            color: #6c757d;
            margin-bottom: 20px;
            font-size: 16px;
        }

        .empty-state .btn-edit {
            display: inline-flex;
            margin: 0 auto;
        }

        /* Thêm CSS cho modal xem ảnh */
        .avatar-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1100;
            align-items: center;
            justify-content: center;
        }

        .avatar-modal img {
            max-width: 90%;
            max-height: 90vh;
            border-radius: 8px;
            animation: zoomIn 0.3s ease;
        }

        .avatar-modal .close-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            color: white;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            opacity: 0.8;
            transition: opacity 0.3s;
        }

        .avatar-modal .close-btn:hover {
            opacity: 1;
        }

        @keyframes zoomIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        .password-form-container {
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .password-helper {
            font-size: 13px;
            color: #666;
            margin-top: 5px;
        }

        .payment-status.paid {
            color: #28a745;
            font-weight: 500;
        }

        .payment-status.unpaid {
            color: #dc3545;
            font-weight: 500;
        }

        .payment-warning {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 6px;
            padding: 12px;
            margin-bottom: 12px;
            color: #856404;
            font-size: 14px;
            line-height: 1.4;
            display: flex;
            align-items: flex-start;
            gap: 8px;
        }

        .payment-warning i {
            color: #f39c12;
            margin-top: 2px;
            font-size: 16px;
        }

        .btn-payment {
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 13px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            transition: all 0.2s;
            font-weight: 500;
            min-width: 140px;
            justify-content: center;
        }

        .btn-payment:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .btn-payment:disabled {
            cursor: not-allowed;
            opacity: 0.6;
            transform: none;
            box-shadow: none;
        }

        .btn-payment.momo {
            background: linear-gradient(45deg, #a50064, #d82d8b);
            color: white;
        }

        .btn-payment.momo:hover:not(:disabled) {
            background: linear-gradient(45deg, #8a0054, #c41f7a);
        }

        .btn-payment.vnpay {
            background: linear-gradient(45deg, #1e88e5, #42a5f5);
            color: white;
        }

        .btn-payment.vnpay:hover:not(:disabled) {
            background: linear-gradient(45deg, #1976d2, #2196f3);
        }

        .btn-payment.cod {
            background: linear-gradient(45deg, #43a047, #66bb6a);
            color: white;
        }

        .btn-payment.cod:hover:not(:disabled) {
            background: linear-gradient(45deg, #388e3c, #4caf50);
        }

        @media (max-width: 768px) {
            .payment-options {
                flex-direction: column;
            }
            
            .btn-payment {
                width: 100%;
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <!-- Thông báo  -->
    <div class="alert-messages">
        <div class="alert alert-success" id="successAlert">
            <div class="alert-content">
                <i class="fas fa-check-circle alert-icon"></i>
                <span class="alert-text" id="successMessage"></span>
            </div>
            <button class="alert-close" onclick="hideAlert('successAlert')">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="alert alert-error" id="errorAlert">
            <div class="alert-content">
                <i class="fas fa-exclamation-circle alert-icon"></i>
                <span class="alert-text" id="errorMessage"></span>
            </div>
            <button class="alert-close" onclick="hideAlert('errorAlert')">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>

    <div class="profile-container">
        <!-- Sidebar -->
        <div class="profile-sidebar">
            <div class="profile-avatar">
                <img src="{{user.avatar.url}}" alt="Avatar" id="userAvatar">
                <div class="avatar-upload">
                    <i class="fas fa-camera"></i> Cập nhật ảnh
                </div>
            </div>
            <div class="profile-name">{{profileData.name}}</div>
            <div class="profile-role">{{profileData.role}}</div>
            <ul class="profile-menu">
                <li>
                    <a href="#info" onclick="loadContent('profile')" class="active">
                        <i class="fas fa-user"></i> Thông tin cá nhân
                    </a>
                </li>
                <li>
                    <a href="#orders" onclick="loadContent('orders')">
                        <i class="fas fa-shopping-bag"></i> Đơn hàng gần đây
                    </a>
                </li>
                <li>
                    <a href="#favorites" onclick="loadContent('favorites')">
                        <i class="fas fa-heart"></i> Sản phẩm yêu thích
                    </a>
                </li>
                <li>
                    <a href="#address" onclick="loadContent('address')">
                        <i class="fas fa-address-book"></i> Sổ địa chỉ
                    </a>
                </li>
                <li>
                    <a href="#password" onclick="loadContent('password')">
                        <i class="fas fa-key"></i> Đổi mật khẩu
                    </a>
                </li>
                <!-- Divider line -->
                <li style="margin: 15px 0;">
                    <div style="height: 1px; background: rgba(255,255,255,0.2);"></div>
                </li>
                <!-- Nút quay về trang chủ -->
                <li>
                    <a href="/products">
                        <i class="fas fa-home"></i> Quay về trang chủ
                    </a>
                </li>
                <li>
                    <a href="#" onclick="logout()">
                        <i class="fas fa-sign-out-alt"></i> Đăng xuất
                    </a>
                </li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="profile-main">
            <div id="contentArea">
                <!-- Profile Content -->
                <div id="profileContent">
                    <div class="section-title">
                        Thông tin cá nhân
                        <button class="btn-edit" onclick="openEditModal()">
                            <i class="fas fa-edit"></i> Chỉnh sửa
                        </button>
                    </div>

                    <div class="info-grid">
                        <div class="info-item">
                            <div class="info-label">Họ và tên</div>
                            <div class="info-value">{{user.name}}</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">Tên đăng nhập</div>
                            <div class="info-value">{{user.username}}</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">Email</div>
                            <div class="info-value {{#if user.isVerified}}verified{{else}}not-verified{{/if}}">
                                {{user.email}}
                                {{#if user.isVerified}}
                                    <i class="fas fa-check-circle"></i>
                                {{else}}
                                    <i class="fas fa-exclamation-circle"></i>
                                {{/if}}
                            </div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">Số điện thoại</div>
                            <div class="info-value">{{user.phone}}</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">Giới tính</div>
                            <div class="info-value">
                                {{#if (eq user.gender "male")}} Nam
                                {{else if ( eq user.gender "female" )}} Nữ
                                {{else if ( eq user.gender "other" )}} Khác
                                {{/if}}
                            </div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">Ngày sinh</div>
                            <div class="info-value">{{formatDate user.dateOfBirth}}</div>
                        </div>
                    </div>
                </div>
                <!-- Address Content -->
                <div id="addressContent" style="display: none;">
                    <div class="section-title">
                        Sổ Địa Chỉ
                        <button class="btn-edit" onclick="openAddAddressModal()">
                            <i class="fas fa-plus"></i> Thêm địa chỉ mới
                        </button>
                    </div>
                    <div class="address-list">
                        {{#each user.addresses}}
                        <div class="address-card">
                            {{#if isDefault}}
                            <div class="default-badge">Mặc định</div>
                            {{/if}}
                            <div class="address-info">
                                <div class="recipient">{{recipientName}}</div>
                                <div class="address-text">{{addressLine}}, {{ward}}, {{city}}</div>
                            </div>
                            <div class="address-actions">
                                <button class="btn-action btn-edit" onclick="editAddress('{{_id}}')">
                                    <i class="fas fa-edit"></i> Sửa
                                </button>
                                <button class="btn-action btn-delete" onclick="deleteAddress('{{_id}}')">
                                    <i class="fas fa-trash"></i> Xóa
                                </button>
                                {{#unless isDefault}}
                                <button class="btn-action btn-default" onclick="setDefaultAddress('{{_id}}')">
                                    <i class="fas fa-check"></i> Đặt mặc định
                                </button>
                                {{/unless}}
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
                <!-- Change password content -->
                <div id="passwordContent" style="display: none;">
                    <div class="section-title">
                        Đổi mật khẩu
                    </div>
                    <div class="password-form-container">
                        <form id="changePasswordForm">
                            <div class="form-group">
                                <label>Mật khẩu hiện tại</label>
                                <div class="input-wrapper">
                                    <input type="password" class="form-control" name="currentPassword" id="currentPassword" required>
                                    <i class="fas fa-eye password-toggle" onclick="togglePassword('currentPassword')"></i>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Mật khẩu mới</label>
                                <div class="input-wrapper">
                                    <input type="password" class="form-control" name="newPassword" id="newPassword" required>
                                    <i class="fas fa-eye password-toggle" onclick="togglePassword('newPassword')"></i>
                                </div>
                                <div class="password-helper">Mật khẩu phải có ít nhất 6 ký tự</div>
                            </div>
                            <div class="form-group">
                                <label>Xác nhận mật khẩu mới</label>
                                <div class="input-wrapper">
                                    <input type="password" class="form-control" name="confirmNewPassword" id="confirmNewPassword" required>
                                    <i class="fas fa-eye password-toggle" onclick="togglePassword('confirmNewPassword')"></i>
                                </div>
                            </div>
                            <button type="submit" class="btn-edit">
                                <i class="fas fa-save"></i> Đổi mật khẩu
                            </button>
                        </form>
                    </div>
                </div>
                <!-- Orders Content -->
                <div id="ordersContent" style="display: none;">
                    <div class="section-title">
                        Đơn hàng của tôi
                    </div>
                    <div class="orders-list">
                        {{#if recentOrders.length}}
                            {{#each recentOrders}}
                            <div class="order-card">
                                <div class="order-header">
                                    <span class="order-id">Mã đơn: {{this._id}}</span>
                                    {{!-- <span class="order-status status-{{status}}">{{status}}</span> --}}
                                </div>
                                <div class="order-body">
                                    <div class="order-info">
                                        <div><strong>Ngày đặt:</strong> {{formatDate createdAt}}</div>
                                        <div><strong>Tổng tiền:</strong> {{formatCurrency totalAmount}}</div>
                                        <div><strong>Phương thức:</strong> 
                                            {{#if (eq paymentMethod "cod")}}
                                                Thanh toán khi nhận hàng
                                            {{else}}
                                                Chuyển khoản
                                                {{#if isPaid}}
                                                    <span class="payment-status paid"> - Đã thanh toán</span>
                                                {{else}}
                                                    <span class="payment-status unpaid"> - Chưa thanh toán</span>
                                                {{/if}}
                                            {{/if}}
                                        </div>
                                        <div><strong>Địa chỉ giao:</strong> {{deliveryAddress}}</div>
                                    </div>
                                    <div class="order-items">
                                        {{#each items}}
                                        <div class="order-item">
                                            <span class="item-name">{{product.name}}</span>
                                            <span class="item-qty">x{{quantity}}</span>
                                            <span class="item-price">{{formatCurrency price}}</span>
                                        </div>
                                        {{/each}}
                                    </div>
                                </div>
                                <div class="order-footer">
                                      {{#if (eq paymentMethod "banking")}}
                                            {{#unless isPaid}}
                                            <div class="payment-warning">
                                                <i class="fas fa-exclamation-triangle"></i>
                                                <span>Đơn hàng của bạn đang chưa được hoàn tất, hãy chọn phương thức thanh toán để hoàn thành đơn hàng</span>
                                            </div>
                                            <div class="payment-actions">
                                                <div class="payment-options">
                                                    <button class="btn-payment momo" onclick="processPayment('{{_id}}', 'banking', 'momo')">
                                                        <i class="fab fa-cc-visa"></i>
                                                        Thanh toán MoMo
                                                    </button>
                                                    <button class="btn-payment vnpay" onclick="processPayment('{{_id}}', 'banking', 'vnpay')">
                                                        <i class="fas fa-credit-card"></i>
                                                        Thanh toán VNPay
                                                    </button>
                                                    <button class="btn-payment cod" onclick="processPayment('{{_id}}', 'cod')">
                                                        <i class="fas fa-money-bill-wave"></i>
                                                        Đổi sang tiền mặt
                                                    </button>
                                                </div>
                                            </div>
                                            {{/unless}}
                                        {{/if}}
                                    <a href="/user/orders/{{_id}}" class="btn-action btn-view">
                                        <i class="fas fa-eye"></i> Xem chi tiết
                                    </a>
                                </div>
                            </div>
                            {{/each}}
                        {{else}}
                            <p>Bạn chưa có đơn hàng nào.</p>
                        {{/if}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal" id="editModal">
        <div class="modal-content">
            <button class="modal-close" onclick="closeEditModal()">
                <i class="fas fa-times"></i>
            </button>
            <h2 style="margin-bottom: 20px;">Chỉnh sửa thông tin</h2>
            <form id="editProfileForm">
                <div class="form-group">
                    <label>Họ và tên</label>
                    <input type="text" class="form-control" name="name" value="{{user.name}}">
                </div>
                <div class="form-group">
                    <label>Số điện thoại</label>
                    <input type="tel" class="form-control" name="phone" value="{{user.phone}}">
                </div>
                <div class="form-group">
                    <label>Giới tính</label>
                    <select class="form-control" name="gender">
                        <option value="male" {{#if (eq user.gender "male")}}selected{{/if}}>Nam</option>
                        <option value="female" {{#if (eq user.gender "female")}}selected{{/if}}>Nữ</option>
                        <option value="other" {{#if (eq user.gender "other")}}selected{{/if}}>Khác</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Ngày sinh</label>
                    <input type="date" class="form-control" name="dateOfBirth" value="{{formatDate user.dateOfBirth}}">
                </div>
                <button type="submit" class="btn-edit" style="width: 100%;">
                    <i class="fas fa-save"></i> Lưu thay đổi
                </button>
            </form>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div class="modal" id="addressModal">
        <div class="modal-content">
            <button class="modal-close" onclick="closeAddAddressModal()">
                <i class="fas fa-times"></i>
            </button>
            <h2 style="margin-bottom: 20px;">Thêm địa chỉ mới</h2>
            <form id="addressForm">
                <div class="form-group">
                    <label>Tên người nhận</label>
                    <input type="text" class="form-control" name="recipientName" required>
                </div>
                <div class="form-group">
                    <label>Địa chỉ</label>
                    <input type="text" class="form-control" name="addressLine" required>
                </div>
                <div class="form-group">
                    <label>Phường/Xã</label>
                    <select id="wardSelect" class="form-control" name="ward" required disabled></select>

                </div>
                <div class="form-group">
                    <label>Tỉnh/Thành phố</label>
                    <select id="provinceSelect" class="form-control" name="city" required></select>
                </div>
                <div class="checkbox-group">
                    <input type="checkbox" name="isDefault" id="isDefault">
                    <label for="isDefault">Đặt làm địa chỉ mặc định</label>
                </div>
                <button type="submit" class="btn-edit" style="width: 100%;">
                    <i class="fas fa-save"></i> Lưu địa chỉ
                </button>
            </form>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div class="modal" id="editAddressModal">
        <div class="modal-content">
            <button class="modal-close" onclick="closeEditAddressModal()">
                <i class="fas fa-times"></i>
            </button>
            <h2 style="margin-bottom: 20px;">Chỉnh sửa địa chỉ</h2>
            <form id="editAddressForm">
                <input type="hidden" id="editAddressId" name="addressId">
                <div class="form-group">
                    <label>Tên người nhận</label>
                    <input type="text" class="form-control" name="recipientName" id="editRecipientName" required>
                </div>
                <div class="form-group">
                    <label>Địa chỉ</label>
                    <input type="text" class="form-control" name="addressLine" id="editAddressLine" required>
                </div>
                <div class="form-group">
                    <label>Phường/Xã</label>
                    <select id="editWardSelect" class="form-control" name="ward" required disabled></select>
                </div>
                <div class="form-group">
                    <label>Tỉnh/Thành phố</label>
                    <select id="editProvinceSelect" class="form-control" name="city" required></select>
                </div>
                <div class="checkbox-group">
                    <input type="checkbox" name="isDefault" id="editIsDefault">
                    <label for="editIsDefault">Đặt làm địa chỉ mặc định</label>
                </div>
                <button type="submit" class="btn-edit" style="width: 100%;">
                    <i class="fas fa-save"></i> Lưu thay đổi
                </button>
            </form>
        </div>
    </div>

    <!-- Thêm modal xem ảnh vào cuối body -->
    <div class="avatar-modal" id="avatarModal">
        <button class="close-btn" onclick="closeAvatarModal()">
            <i class="fas fa-times"></i>
        </button>
        <img id="avatarModalImg" src="" alt="Avatar">
    </div>

    <!-- Change password modal -->
    <div class="modal" id="changePasswordModal">
        <div class="modal-content">
            <button class="modal-close" onclick="closeChangePasswordModal()">
                <i class="fas fa-times"></i>
            </button>
            <h2 style="margin-bottom: 20px;">Đổi mật khẩu</h2>
            <form id="changePasswordForm">
                <div class="form-group">
                    <label>Mật khẩu hiện tại</label>
                    <div class="input-wrapper">
                        <input type="password" class="form-control" name="currentPassword" id="currentPassword" required>
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('currentPassword')"></i>
                    </div>
                </div>
                <div class="form-group">
                    <label>Mật khẩu mới</label>
                    <div class="input-wrapper">
                        <input type="password" class="form-control" name="newPassword" id="newPassword" required>
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('newPassword')"></i>
                    </div>
                    <div class="input-helper">Mật khẩu phải có ít nhất 6 ký tự</div>
                </div>
                <div class="form-group">
                    <label>Xác nhận mật khẩu mới</label>
                    <div class="input-wrapper">
                        <input type="password" class="form-control" name="confirmNewPassword" id="confirmNewPassword" required>
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('confirmNewPassword')"></i>
                    </div>
                </div>
                <button type="submit" class="btn-edit" style="width: 100%;">
                    <i class="fas fa-save"></i> Đổi mật khẩu
                </button>
            </form>
        </div>
    </div>


<script>

    document.addEventListener('DOMContentLoaded', () => {
        const provinceSelect = document.getElementById('provinceSelect');
        const wardSelect = document.getElementById('wardSelect');

        // Lấy danh sách tỉnh/thành phố
        fetch('/api/provinces')
            .then(res => res.json())
            .then(provinces => {
            provinceSelect.innerHTML = `<option value="">Chọn tỉnh/thành</option>`;
            provinces.forEach(p => {
                provinceSelect.innerHTML += `<option value="${p.code}" data-name="${p.name}">${p.name}</option>`;
            });
            provinceSelect.disabled = false;
            });

        // Khi chọn tỉnh/thành ➜ lấy phường/xã
        provinceSelect.addEventListener('change', () => {
            const provinceCode = provinceSelect.value;
            console.log(provinceCode);
            wardSelect.innerHTML = `<option value="">Chọn phường/xã</option>`;
            wardSelect.disabled = true;

            if (!provinceCode) return;

            fetch(`/api/wards/${provinceCode}`)
            .then(res => res.json())
            .then(wards => {
                wards.forEach(w => {
                wardSelect.innerHTML += `<option value="${w.code}" data-name="${w.name}">${w.name}</option>`;
                });
                wardSelect.disabled = false;
            });
        });
    });

    function loadContent(section) {
        // Remove active class from all menu items
        document.querySelectorAll('.profile-menu a').forEach(item => {
            item.classList.remove('active');
        });
        
        // Add active class to clicked menu item
        const targetLink = document.querySelector(`.profile-menu a[href="#${section}"]`);
        if (targetLink) {
            targetLink.classList.add('active');
        }
        
        // Hide all content sections
        const profileContent = document.querySelector('#profileContent');
        const addressContent = document.querySelector('#addressContent');
        const passwordContent = document.querySelector('#passwordContent');
        const ordersContent  = document.querySelector('#ordersContent');
        
        profileContent.style.display = 'none';
        addressContent.style.display = 'none';
        passwordContent.style.display = 'none';
        ordersContent.style.display = 'none';
        
        // Show selected section
        switch(section) {
            case 'profile':
                profileContent.style.display = 'block';
                break;
            case 'address':
                addressContent.style.display = 'block';
                if (addressContent.querySelector('.address-list').children.length === 0) {
                    loadAddresses();
                }
                break;
            case 'password':
                passwordContent.style.display = 'block';
                break;
            case 'orders':
                ordersContent.style.display = 'block';
                break;
        }
    }

    async function loadAddresses() {
        const addressList = document.querySelector('.address-list');
        
        try {
            const res = await fetch('/user/address');
            if (!res.ok) {
                throw new Error('Network response was not ok');
            }
            
            const data = await res.json();
            
            // Kiểm tra nếu không có địa chỉ
            if (!data.addresses || data.addresses.length === 0) {
                addressList.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-map-marker-alt"></i>
                        <p>Bạn chưa có địa chỉ nào</p>
                        <button class="btn-edit" onclick="openAddAddressModal()">
                            <i class="fas fa-plus"></i> Thêm địa chỉ mới
                        </button>
                    </div>
                `;
                return;
            }

            // Render địa chỉ nếu có
            addressList.innerHTML = data.addresses.map(address => `
                <div class="address-card">
                    ${address.isDefault ? '<div class="default-badge">Mặc định</div>' : ''}
                    <div class="address-info">
                        <div class="recipient">${address.recipientName || ''}</div>
                        <div class="address-text">${address.addressLine || ''}, ${address.ward || ''}, ${address.city || ''}</div>
                    </div>
                    <div class="address-actions">
                        <button class="btn-action btn-edit" onclick="editAddress('${address._id}')">
                            <i class="fas fa-edit"></i> Sửa
                        </button>
                        <button class="btn-action btn-delete" onclick="deleteAddress('${address._id}')">
                            <i class="fas fa-trash"></i> Xóa
                        </button>
                        ${!address.isDefault ? `
                            <button class="btn-action btn-default" onclick="setDefaultAddress('${address._id}')">
                                <i class="fas fa-check"></i> Đặt mặc định
                            </button>
                        ` : ''}
                    </div>
                </div>
            `).join('');

        } catch (err) {
            console.error('Error loading addresses:', err);
            addressList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-circle"></i>
                    <p>Có lỗi xảy ra khi tải danh sách địa chỉ</p>
                    <button class="btn-edit" onclick="loadAddresses()">
                        <i class="fas fa-redo"></i> Thử lại
                    </button>
                </div>
            `;
        }
    }

    // Thêm vào trong thẻ <script>
    function showAlert(type, message) {
        const alertId = type === 'success' ? 'successAlert' : 'errorAlert';
        const alert = document.getElementById(alertId);
        const messageElement = document.getElementById(type === 'success' ? 'successMessage' : 'errorMessage');
        
        messageElement.textContent = message;
        alert.style.display = 'flex';
        alert.classList.add('shake');
        
        // Remove shake animation after it completes
        setTimeout(() => {
            alert.classList.remove('shake');
        }, 500);

        // Auto hide after 3 seconds for success messages
        if (type === 'success') {
            setTimeout(() => {
                hideAlert(alertId);
            }, 3000);
        }
    }

    function hideAlert(alertId) {
        document.getElementById(alertId).style.display = 'none';
    }


  // Kiểm tra có accessToken không, nếu không thì chuyển về login
  (async function ensureAuth() {
    try {
    const res = await fetch('/auth/verify-token', { method: 'POST', credentials: 'include' });
    const data = await res.json();
    if (!data.success) {
      window.location.href = '/auth/login';
    }
  } catch (err) {
    
    window.location.href = '/auth/register';
  }
  })();

  // Ghi đè global fetch để gửi cookie tự động (không dùng localStorage nữa)
  const originalFetch = window.fetch;
  window.fetch = async function(url, config = {}) {
    config.headers = config.headers || {};

    // Gắn Content-Type nếu không dùng FormData
    if (config.body && !(config.body instanceof FormData)) {
      config.headers['Content-Type'] = 'application/json';
    }

    config.credentials = 'include'; // gửi cookie lên BE

    let res = await originalFetch(url, config);


    // Nếu token hết hạn → cố gắng refresh
    if (res.status === 401) {
      const refreshRes = await originalFetch('/auth/refresh-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include'
      });

      const refreshData = await refreshRes.json();

      if (refreshData.success) {
        // Gọi lại API cũ sau khi refresh thành công
        res = await originalFetch(url, config);
      } else {
        window.location.href = '/auth/login';
        return Promise.reject('Không thể refresh token');
      }
    }

    return res;
  };

    // Function để tải danh sách địa chỉ
    async function loadAddresses() {
        try {
            const res = await fetch('/user/address');
            const data = await res.json();
            const addressList = document.querySelector('.address-list');

            if (!data.success) {
                showAlert('error', data.message || 'Không thể tải danh sách địa chỉ');
                return;
            }

            if (!data.addresses || data.addresses.length === 0) {
                addressList.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-map-marker-alt"></i>
                        <p>Bạn chưa có địa chỉ nào</p>
                    </div>
                `;
                return;
            }

            addressList.innerHTML = data.addresses.map(address => `
                <div class="address-card">
                    ${address.isDefault ? '<div class="default-badge">Mặc định</div>' : ''}
                    <div class="address-info">
                        <div class="recipient">${address.recipientName}</div>
                        <div class="address-text">${address.addressLine}, ${address.ward}, ${address.city}</div>
                    </div>
                    <div class="address-actions">
                        <button class="btn-action btn-edit" onclick="editAddress('${address._id}')">
                            <i class="fas fa-edit"></i> Sửa
                        </button>
                        <button class="btn-action btn-delete" onclick="deleteAddress('${address._id}')">
                            <i class="fas fa-trash"></i> Xóa
                        </button>
                        ${!address.isDefault ? `
                            <button class="btn-action btn-default" onclick="setDefaultAddress('${address._id}')">
                                <i class="fas fa-check"></i> Đặt mặc định
                            </button>
                        ` : ''}
                    </div>
                </div>
            `).join('');

        } catch (err) {
            console.log(err);
            showAlert('error', 'Có lỗi xảy ra khi tải danh sách địa chỉ');
        }
    }

// Load content based on URL hash when page loads
window.addEventListener('load', () => {
    const hash = window.location.hash.slice(1) || 'profile';
    loadContent(hash);
});

  // Mở / đóng modal chỉnh sửa
  function openEditModal() {
    document.getElementById('editModal').style.display = 'flex';
  }

  function closeEditModal() {
    document.getElementById('editModal').style.display = 'none';
  }

  // Mở / đóng modal thêm địa chỉ
  function openAddAddressModal() {
    const modal = document.getElementById('addressModal');
    const form = document.getElementById('addressForm');
    form.reset(); // Reset form when opening
    modal.style.display = 'flex';
  }

  function closeAddAddressModal() {
    const modal = document.getElementById('addressModal');
    modal.style.display = 'none';
  }

  // Mở / đóng modal chỉnh sửa địa chỉ
  function openEditAddressModal() {
    document.getElementById('editAddressModal').style.display = 'flex';
  }

  function closeEditAddressModal() {
    document.getElementById('editAddressModal').style.display = 'none';
  }

  // Add event listener for the address form
  document.getElementById('addressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    
    try {
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        const selectedProvinceOption = document.querySelector('#provinceSelect option:checked');
        const selectedWardOption = document.querySelector('#wardSelect option:checked');

        data.cityName = selectedProvinceOption?.textContent || '';
        data.wardName = selectedWardOption?.textContent || '';

        // Validate dữ liệu
        if (!data.recipientName || !data.addressLine || !data.ward || !data.city) {
            showAlert('error', 'Vui lòng điền đầy đủ thông tin');
            return;
        }

        const res = await fetch('/user/address', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await res.json();
        
        if (result.success) {
            showAlert('success', 'Thêm địa chỉ thành công!');
            closeAddAddressModal();
            this.reset();
            loadAddresses();
        } else {
            showAlert('error', result.message || 'Thêm địa chỉ thất bại!');
        }
    } catch (err) {
        console.error('Error:', err);
        showAlert('error', 'Có lỗi xảy ra khi thêm địa chỉ');
    } finally {
        submitBtn.disabled = false;
    }
  });


  // Edit Address
  async function editAddress(addressId) {
    try {
        const res = await fetch(`/user/address/${addressId}`);
        const data = await res.json();
        
        if (data.success) {
            const modal = document.getElementById('editAddressModal');
            const form = document.getElementById('editAddressForm');
            const address = data.address;
            console.log('✅ ADDRESS:', address);
            console.log('🏙️ city:', address.city);
            console.log('🏘️ ward:', address.ward);
            
            // Lưu ID địa chỉ vào hidden input
            document.getElementById('editAddressId').value = addressId;
            
            // Điền thông tin vào form
            document.getElementById('editRecipientName').value = address.recipientName;
            document.getElementById('editAddressLine').value = address.addressLine;
            
            // Xử lý select tỉnh/thành và phường/xã
            const editProvinceSelect = document.getElementById('editProvinceSelect');
            const editWardSelect = document.getElementById('editWardSelect');
            
            // Load provinces first
            const provincesRes = await fetch('/api/provinces');
            const provinces = await provincesRes.json();
            
            editProvinceSelect.innerHTML = `<option value="">Chọn tỉnh/thành</option>`;
            provinces.forEach(p => {
                editProvinceSelect.innerHTML += `
                    <option value="${p.code}" data-name="${p.name}" 
                        ${p.name.trim() === address.city.trim() ? 'selected' : ''}>
                        ${p.name}
                    </option>`;
            });
            
            // Load wards for selected province
            if (address.city) {
                const selectedProvince = provinces.find(p => p.name.trim() === address.city.trim());
                if (selectedProvince) {
                    const wardsRes = await fetch(`/api/wards/${selectedProvince.code}`);
                    const wards = await wardsRes.json();
                    
                    editWardSelect.innerHTML = `<option value="">Chọn phường/xã</option>`;
                    wards.forEach(w => {
                        editWardSelect.innerHTML += `
                            <option value="${w.code}" data-name="${w.name}"
                                ${w.name.trim() === address.ward.trim() ? 'selected' : ''}>
                                ${w.name}
                            </option>`;
                    });
                    editWardSelect.disabled = false;
                }
            }

            document.getElementById('editIsDefault').checked = address.isDefault;
            
            // Hiển thị modal
            modal.style.display = 'flex';
            
            // Xử lý sự kiện thay đổi tỉnh/thành
            editProvinceSelect.addEventListener('change', async () => {
                const provinceCode = editProvinceSelect.value;
                editWardSelect.innerHTML = `<option value="">Chọn phường/xã</option>`;
                editWardSelect.disabled = true;

                if (!provinceCode) return;

                const wardsRes = await fetch(`/api/wards/${provinceCode}`);
                const wards = await wardsRes.json();
                wards.forEach(w => {
                    editWardSelect.innerHTML += `
                        <option value="${w.code}" data-name="${w.name}">
                            ${w.name}
                        </option>`;
                });
                editWardSelect.disabled = false;
            });
        } else {
            showAlert('error', data.message);
        }
    } catch (err) {
        console.error('ERROR:', err);
        showAlert('error', 'Có lỗi xảy ra khi tải thông tin địa chỉ');
    }
}

function closeEditAddressModal() {
    document.getElementById('editAddressModal').style.display = 'none';
}


// Delete Address
async function deleteAddress(addressId) {
    // Confirm before deleting
    if (!confirm('Bạn có chắc chắn muốn xóa địa chỉ này?')) {
        return;
    }

    try {
        const res = await fetch(`/user/address/${addressId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await res.json();

        if (data.success) {
            showAlert('success', 'Xóa địa chỉ thành công!');
            // Reload address list
            loadAddresses();
        } else {
            showAlert('error', data.message || 'Xóa địa chỉ thất bại!');
        }
    } catch (err) {
        console.error('Error:', err);
        showAlert('error', 'Có lỗi xảy ra khi xóa địa chỉ');
    }
}

// Set Default Address
async function setDefaultAddress(addressId) {
    try {
        const res = await fetch(`/user/address/${addressId}/default`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await res.json();

        if (data.success) {
            showAlert('success', 'Đã đặt làm địa chỉ mặc định');
            // Reload address list to show updated default status
            loadAddresses();
        } else {
            showAlert('error', data.message || 'Không thể đặt địa chỉ mặc định');
        }
    } catch (err) {
        console.error('Error setting default address:', err);
        showAlert('error', 'Có lỗi xảy ra khi đặt địa chỉ mặc định');
    }
}

// Add event listener for edit address form
document.getElementById('editAddressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    
    try {
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());
        const addressId = data.addressId;
        delete data.addressId;

        const selectedProvinceOption = document.querySelector('#editProvinceSelect option:checked');
        const selectedWardOption = document.querySelector('#editWardSelect option:checked');

        data.cityName = selectedProvinceOption?.textContent || '';
        data.wardName = selectedWardOption?.textContent || '';

        const res = await fetch(`/user/address/${addressId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await res.json();
        
        if (result.success) {
            showAlert('success', 'Cập nhật địa chỉ thành công!');
            closeEditAddressModal();
            loadAddresses();
        } else {
            showAlert('error', result.message || 'Cập nhật địa chỉ thất bại!');
        }
    } catch (err) {
        console.error('Error:', err);
        showAlert('error', 'Có lỗi xảy ra khi cập nhật địa chỉ');
    } finally {
        submitBtn.disabled = false;
    }
});
  // Submit form cập nhật thông tin cá nhân
  document.getElementById('editProfileForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());

    try {
      const res = await fetch('/user/profile', {
        method: 'PUT',
        body: JSON.stringify(data)
      });
      const result = await res.json();
      if (result.success) {
        showAlert('success', 'Cập nhật thông tin thành công!');
        location.reload();
      } else{
        showAlert('error', 'Cập nhật thông tin thất bại!!!');
      }
    } catch (err) {
      console.error('ERROR: ', err);
      showAlert('error', 'Có lỗi xảy ra khi tải ảnh');
    }
  });

  // Tách riêng xử lý click avatar và upload
  document.querySelector('.profile-avatar img').addEventListener('click', function() {
    const avatarModal = document.getElementById('avatarModal');
    const modalImg = document.getElementById('avatarModalImg');
    modalImg.src = this.src;
    avatarModal.style.display = 'flex';
});

function closeAvatarModal() {
    document.getElementById('avatarModal').style.display = 'none';
}

// Xử lý upload khi click vào nút cập nhật
document.querySelector('.avatar-upload').addEventListener('click', (e) => {
    e.stopPropagation(); // Ngăn event bubbling lên img
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    
    input.onchange = async function(e) {
        const file = e.target.files[0];
        if (!file) return;

        const formData = new FormData();
        formData.append('avatar', file);

        try {
            const res = await fetch('/user/upload-avatar', {
                method: 'POST',
                body: formData
            });
            const data = await res.json();
            
            if (data.success) {
                document.getElementById('userAvatar').src = data.url;
                // Cập nhật luôn ảnh trong modal nếu đang mở
                document.getElementById('avatarModalImg').src = data.url;
                showAlert('success', 'Cập nhật ảnh đại diện thành công!');
            } else {
                showAlert('error', data.message);
            }
        } catch (err) {
            console.error(err);
            showAlert('error', 'Có lỗi xảy ra khi tải ảnh');
        }
    };
    
    input.click();
});

// Thêm xử lý đóng modal khi click bên ngoài ảnh
document.getElementById('avatarModal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeAvatarModal();
    }
});
  // Đăng xuất
  async function logout() {
    try {
      await fetch('/auth/logout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include'
      });
    } catch (e) {
      console.warn('Logout gọi không thành công');
    } finally {
      window.location.href = '/auth/login';
    }
  }

  // Mở / đóng modal xem ảnh
  function openAvatarModal(imageUrl) {
    const modal = document.getElementById('avatarModal');
    const avatarPreview = document.getElementById('avatarPreview');
    avatarPreview.src = imageUrl;
    modal.style.display = 'flex';
  }

  function closeAvatarModal() {
    document.getElementById('avatarModal').style.display = 'none';
  }


function openChangePasswordModal() {
    document.getElementById('changePasswordModal').style.display = 'flex';
}

function closeChangePasswordModal() {
    document.getElementById('changePasswordModal').style.display = 'none';
    document.getElementById('changePasswordForm').reset();
}

function togglePassword(inputId) {
    const input = document.getElementById(inputId);
    const icon = input.nextElementSibling;
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
    }
}

document.getElementById('changePasswordForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    
    try {
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());
        
        // Validate password
        if (data.newPassword.length < 6) {
            showAlert('error', 'Mật khẩu mới phải có ít nhất 6 ký tự');
            return;
        }
        
        if (data.newPassword !== data.confirmNewPassword) {
            showAlert('error', 'Xác nhận mật khẩu không khớp');
            return;
        }

        if (data.currentPassword == data.newPassword) {
            showAlert('error', 'Không được dùng lại mật khẩu cũ!')
            return;
        }

        const res = await fetch('/user/change-password', {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await res.json();
        
        if (result.success) {
            showAlert('success', 'Đổi mật khẩu thành công!');
            closeChangePasswordModal();
            this.reset();
            
            // Optional: Logout user after password change
            setTimeout(() => {
                logout();
            }, 2000);
        } else {
            showAlert('error', result.message || 'Đổi mật khẩu thất bại!');
        }
    } catch (err) {
        console.error('Error:', err);
        showAlert('error', 'Có lỗi xảy ra khi đổi mật khẩu');
    } finally {
        submitBtn.disabled = false;
    }
});

// Change Payment Method
async function processPayment(orderId, paymentMethod, bankingMethod) {
    const button = event.target;
    const originalContent = button.innerHTML;
    
    // Disable all payment buttons for this order
    const paymentActions = button.closest('.payment-actions');
    const allButtons = paymentActions.querySelectorAll('.btn-payment');
    allButtons.forEach(btn => btn.disabled = true);
    
    // Update button text
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
    
    try {
        let apiUrl = '';
        let requestBody = {};
        
        // Determine API endpoint and request body based on payment method
        switch(bankingMethod) {
            case 'momo':
                apiUrl = `/order/retry-payment`
                requestBody = {
                    orderId, 
                    bankingMethod,
                    paymentMethod,
                 };
                break;
            case 'vnpay':
                apiUrl = `/api/orders/${orderId}/payment/vnpay`;
                requestBody = { orderId: orderId };
                break;
            case 'cod':
                apiUrl = `/api/orders/${orderId}/change-payment-method`;
                requestBody = { paymentMethod: 'cod' };
                break;
        }
        
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });
        
        const result = await response.json();
        
        if (response.ok) {
            if (paymentMethod === 'cod') {
                // COD - just reload the page
                alert('Đổi phương thức thanh toán thành công!');
                location.reload();
            } else {
                // MoMo/VNPay - redirect to payment page
                if (result.payUrl || result.paymentUrl) {
                    window.location.href = result.payUrl || result.paymentUrl;
                } else {
                    alert('Thanh toán thành công!');
                    location.reload();
                }
            }
        } else {
            throw new Error(result.message || 'Có lỗi xảy ra');
        }
        
    } catch (error) {
        console.error('Payment error:', error);
        alert(error.message || 'Có lỗi xảy ra. Vui lòng thử lại sau.');
        
        // Re-enable buttons and restore original content
        allButtons.forEach(btn => btn.disabled = false);
        button.innerHTML = originalContent;
    }
}
  </script>

</body>
</html>